%% file : AMCLIB_TrackObsrv_SF_F32.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for AMCLIB_TrackObsrv_SF_F32
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 12-Sep-2023 09:21:04

%% Copyright 2019-2023 NXP
%%
%% NXP Confidential and Proprietary. This software is owned or controlled by NXP and may only be
%% used strictly in accordance with the applicable license terms.  By expressly accepting such
%% terms or by downloading, installing, activating and/or otherwise using the software, you are
%% agreeing that you have read, and that you agree to comply with and are bound by, such license
%% terms. If you do not agree to be bound by the applicable license terms, then you may not retain,
%% install, activate or otherwise use the software.

%implements AMCLIB_TrackObsrv_SF_F32 "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("AMCLIB_TrackObsrv_SF_F32_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int AMCLIB_TrackObsrv_SF_F32_wrapper_allocmem(void** work1BUS, int_T work1BUSWidth);
        extern int AMCLIB_TrackObsrv_SF_F32_wrapper_freemem(void** work1BUS);

        extern void AMCLIB_TrackObsrv_SF_F32_wrapper_InitializeConditions( void* work1, void* work1BUS,  int32_T* work2, const int32_T p3, const int32_T p4, const int32_T p5, const int32_T p6, const uint16_T p7, const int32_T p8, const uint16_T p9, const int32_T p2, const int32_T p10, const real_T p11, const real_T p12, const real_T p13, const real_T p14, const int32_T p15);
        extern void AMCLIB_TrackObsrv_SF_F32_wrapper_Output(const int32_T u1, const int32_T u2, const int32_T u3,  void* work1, void* work1BUS,  int32_T* work2, const int32_T u4, const int32_T u5, const int32_T u6, const int32_T u7, const uint16_T u8, const int32_T u9, const uint16_T u10, const int32_T u11, const int32_T u12, const int32_T u13, const int32_T u14,  int32_T* y1,  int32_T* y2,  int32_T* y3,  int32_T* y4,  int32_T* y5,  int32_T* y6, const int32_T p1, const int32_T p2);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("AMCLIB_TrackObsrv_SF_F32_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "amclib.h"
        #include "gflib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GFLIB_ControllerPIrAW.h"
        #include "GFLIB_IntegratorTR.h"
        #include "AMCLIB_TrackObsrv.h"

        int AMCLIB_TrackObsrv_SF_F32_wrapper_allocmem(void** work1BUS, int_T work1BUSWidth) {
            *work1BUS = calloc(sizeof(AMCLIB_TRACK_OBSRV_T_F32), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            return 0;
        }
        
        int AMCLIB_TrackObsrv_SF_F32_wrapper_freemem(void** work1BUS) {
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            return 0;
        }

        void AMCLIB_TrackObsrv_SF_F32_wrapper_InitializeConditions( void* work1, void* work1BUS,  int32_T* work2, const int32_T p3, const int32_T p4, const int32_T p5, const int32_T p6, const uint16_T p7, const int32_T p8, const uint16_T p9, const int32_T p2, const int32_T p10, const real_T p11, const real_T p12, const real_T p13, const real_T p14, const int32_T p15) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(AMCLIB_TRACK_OBSRV_T_F32 *)work1BUS)", "(char *)work1", 0)>

            if ((tS32)1 == (tS32)(p2))
            {
              *((tS32 *)work2) = (tS32)1;
            }
            ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamPI.f32CC1sc = (tFrac32)(p3);
            ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamPI.f32CC2sc = (tFrac32)(p4);
            ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamPI.f32UpperLimit = (tFrac32)(p5);
            ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamPI.f32LowerLimit = (tFrac32)(p6);
            ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamPI.u16NShift = (tU16)(p7);
            ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamInteg.f32C1 = (tFrac32)(p8);
            ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamInteg.u16NShift = (tU16)(p9);
            AMCLIB_TrackObsrvInit_F32((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS));

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(AMCLIB_TRACK_OBSRV_T_F32 *)work1BUS)", 0)>
        }

        void AMCLIB_TrackObsrv_SF_F32_wrapper_Output(const int32_T u1, const int32_T u2, const int32_T u3,  void* work1, void* work1BUS,  int32_T* work2, const int32_T u4, const int32_T u5, const int32_T u6, const int32_T u7, const uint16_T u8, const int32_T u9, const uint16_T u10, const int32_T u11, const int32_T u12, const int32_T u13, const int32_T u14,  int32_T* y1,  int32_T* y2,  int32_T* y3,  int32_T* y4,  int32_T* y5,  int32_T* y6, const int32_T p1, const int32_T p2) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(AMCLIB_TRACK_OBSRV_T_F32 *)work1BUS)", "(char *)work1", 0)>

            if((tS32)2 == (tS32)(p1))
            {
              ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamPI.f32CC1sc = (tFrac32)(u4);
              ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamPI.f32CC2sc = (tFrac32)(u5);
              ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamPI.f32Acc = (tFrac32)(u11);
              ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamPI.f32InErrK1 = (tFrac32)(u12);
              ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamPI.f32UpperLimit = (tFrac32)(u6);
              ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamPI.f32LowerLimit = (tFrac32)(u7);
              ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamPI.u16NShift = (tU16)(u8);
              ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamInteg.f32State = (tFrac32)(u13);
              ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamInteg.f32InK1 = (tFrac32)(u14);
              ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamInteg.f32C1 = (tFrac32)(u9);
              ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamInteg.u16NShift = (tU16)(u10);
            }
            if ((tS32)1 == (tS32)(p2))
            {
              if (*(tS32 *)(work2) != (tS32)0)
              {
                *((tS32 *)work2) = (tS32)0;
                AMCLIB_TrackObsrvSetState_F32((tFrac32)(u3), (tFrac32)(u2), (AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS));
                *((tFrac32 *)y1) = (tFrac32)0;
                *((tFrac32 *)y2) = (tFrac32)0;
              }
            }
            AMCLIB_TrackObsrv_F32((tFrac32)(u1), (tFrac32 *)(y1), (tFrac32 *)(y2), (AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS));
            if((tS32)2 == (tS32)(p1))
            {
              *((tFrac32 *)y3) = ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamPI.f32Acc;
              *((tFrac32 *)y4) = ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamPI.f32InErrK1;
              *((tFrac32 *)y5) = ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamInteg.f32State;
              *((tFrac32 *)y6) = ((AMCLIB_TRACK_OBSRV_T_F32 *)(work1BUS))->pParamInteg.f32InK1;   
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(AMCLIB_TRACK_OBSRV_T_F32 *)work1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("amclib.h")>
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIrAW.h")>
        %<LibAddToCommonIncludes("GFLIB_IntegratorTR.h")>
        %<LibAddToCommonIncludes("AMCLIB_TrackObsrv.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_TrackObsrv_SF_F32_wrapper_allocmem(%<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign s32ResetStates = LibBlockDWorkAddr(work2, "", "", 0)
        %assign f32CC1sc = CAST("Number",Parameter[2].Value[0])
        %assign f32CC2sc = CAST("Number",Parameter[3].Value[0])
        %assign f32UpperLimit = CAST("Number",Parameter[4].Value[0])
        %assign f32LowerLimit = CAST("Number",Parameter[5].Value[0])
        %assign u16NShiftPI = CAST("Number",Parameter[6].Value[0])
        %assign f32C1 = CAST("Number",Parameter[7].Value[0])
        %assign u16NShiftI = CAST("Number",Parameter[8].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %assign intmethod = CAST("Number",Parameter[9].Value[0])
        %assign if0 = CAST("Real",Parameter[10].Value[0])
        %assign iksi = CAST("Real",Parameter[11].Value[0])
        %assign mechspeed = CAST("Real",Parameter[12].Value[0])
        %assign polepairs = CAST("Real",Parameter[13].Value[0])
        %assign autoCalcEn = CAST("Number",Parameter[14].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %assign SampleTime = LibBlockSampleTime(block)
        %if(autoCalcEn == 1)
          %assign pgain=12.56637061435917*iksi*if0
          %assign igain=39.47841760435743*if0*if0
          %if (intmethod == 1)
            %assign cc1=pgain
            %assign cc2=-pgain+igain*SampleTime
          %else
            %if (intmethod == 2)
              %assign cc1=pgain+igain*SampleTime
              %assign cc2=-pgain
            %else
              %assign cc1=pgain+igain*SampleTime*0.5
              %assign cc2=-pgain+igain*SampleTime*0.5
            %endif
          %endif
          %assign wmax=polepairs*mechspeed*0.1047197551196598
          %assign cc1f=cc1*3.141592653589793/wmax
          %assign cc2f=cc2*3.141592653589793/wmax
          %assign u16NShiftPI=FEVAL("ceil",FEVAL("log2",FEVAL("abs",cc1f)))
          %assign u16NShiftPI_tmp=FEVAL("ceil",FEVAL("log2",FEVAL("abs",cc2f)))
          %if u16NShiftPI<u16NShiftPI_tmp
            %assign u16NShiftPI=u16NShiftPI_tmp
          %endif
          %if u16NShiftPI<0.0
            %assign u16NShiftPI=0.0
          %endif
          %if u16NShiftPI>31.0
            %assign u16NShiftPI=31.0
          %endif
          %assign u16NShiftPI = CAST("Number",u16NShiftPI)
          %assign f32CC1sc=cc1f*2147483648.0/CAST("Real",(1U << u16NShiftPI))
          %if f32CC1sc>2147483647.0
            %assign f32CC1sc=2147483647.0
          %endif
          %if f32CC1sc<-2147483648.0
            %assign f32CC1sc=-2147483648.0
          %endif
          %assign f32CC1sc = CAST("Number",f32CC1sc)
          %assign f32CC2sc=cc2f*2147483648.0/CAST("Real",(1U << u16NShiftPI))
          %if f32CC2sc>2147483647.0
            %assign f32CC2sc=2147483647.0
          %endif
          %if f32CC2sc<-2147483648.0
            %assign f32CC2sc=-2147483648.0
          %endif
          %assign f32CC2sc = CAST("Number",f32CC2sc)
          %assign f32LowerLimit=-2147483648
          %assign f32UpperLimit=2147483647
          %assign c1f=SampleTime*0.5*wmax/3.141592653589793
          %assign u16NShiftI=FEVAL("ceil",FEVAL("log2",FEVAL("abs",c1f)))
          %if u16NShiftI<0.0
            %assign u16NShiftI=0.0
          %endif
          %if u16NShiftI>31.0
            %assign u16NShiftI=31.0
          %endif
          %assign u16NShiftI = CAST("Number",u16NShiftI)
          %assign f32C1=c1f*2147483648.0/CAST("Real",(1U << u16NShiftI))
          %if f32C1>2147483647.0
            %assign f32C1=2147483647.0
          %endif
          %if f32C1<-2147483648.0
            %assign f32C1=-2147483648.0
          %endif
          %assign f32C1 = CAST("Number",f32C1)
        %endif
        AMCLIB_TrackObsrv_SF_F32_wrapper_InitializeConditions(%<pCtrl>, %<work1BUS_ptr>, %<s32ResetStates>, %<f32CC1sc>, %<f32CC2sc>, %<f32UpperLimit>, %<f32LowerLimit>, %<u16NShiftPI>, %<f32C1>, %<u16NShiftI>, %<resetStatesEnable>, %<intmethod>, %<if0>, %<iksi>, %<mechspeed>, %<polepairs>, %<autoCalcEn>);
    %else
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work2, "", "", 0)
        %assign f32CC1sc = CAST("Number",Parameter[2].Value[0])
        %assign f32CC2sc = CAST("Number",Parameter[3].Value[0])
        %assign f32UpperLimit = CAST("Number",Parameter[4].Value[0])
        %assign f32LowerLimit = CAST("Number",Parameter[5].Value[0])
        %assign u16NShiftPI = CAST("Number",Parameter[6].Value[0])
        %assign f32C1 = CAST("Number",Parameter[7].Value[0])
        %assign u16NShiftI = CAST("Number",Parameter[8].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %assign intmethod = CAST("Number",Parameter[9].Value[0])
        %assign if0 = CAST("Real",Parameter[10].Value[0])
        %assign iksi = CAST("Real",Parameter[11].Value[0])
        %assign mechspeed = CAST("Real",Parameter[12].Value[0])
        %assign polepairs = CAST("Real",Parameter[13].Value[0])
        %assign autoCalcEn = CAST("Number",Parameter[14].Value[0])
        %% 
        %assign SampleTime = LibBlockSampleTime(block)
        %if(autoCalcEn == 1)
          %assign pgain=12.56637061435917*iksi*if0
          %assign igain=39.47841760435743*if0*if0
          %if (intmethod == 1)
            %assign cc1=pgain
            %assign cc2=-pgain+igain*SampleTime
          %else
            %if (intmethod == 2)
              %assign cc1=pgain+igain*SampleTime
              %assign cc2=-pgain
            %else
              %assign cc1=pgain+igain*SampleTime*0.5
              %assign cc2=-pgain+igain*SampleTime*0.5
            %endif
          %endif
          %assign wmax=polepairs*mechspeed*0.1047197551196598
          %assign cc1f=cc1*3.141592653589793/wmax
          %assign cc2f=cc2*3.141592653589793/wmax
          %assign u16NShiftPI=FEVAL("ceil",FEVAL("log2",FEVAL("abs",cc1f)))
          %assign u16NShiftPI_tmp=FEVAL("ceil",FEVAL("log2",FEVAL("abs",cc2f)))
          %if u16NShiftPI<u16NShiftPI_tmp
            %assign u16NShiftPI=u16NShiftPI_tmp
          %endif
          %if u16NShiftPI<0.0
            %assign u16NShiftPI=0.0
          %endif
          %if u16NShiftPI>31.0
            %assign u16NShiftPI=31.0
          %endif
          %assign u16NShiftPI = CAST("Number",u16NShiftPI)
          %assign f32CC1sc=cc1f*2147483648.0/CAST("Real",(1U << u16NShiftPI))
          %if f32CC1sc>2147483647.0
            %assign f32CC1sc=2147483647.0
          %endif
          %if f32CC1sc<-2147483648.0
            %assign f32CC1sc=-2147483648.0
          %endif
          %assign f32CC1sc = CAST("Number",f32CC1sc)
          %assign f32CC2sc=cc2f*2147483648.0/CAST("Real",(1U << u16NShiftPI))
          %if f32CC2sc>2147483647.0
            %assign f32CC2sc=2147483647.0
          %endif
          %if f32CC2sc<-2147483648.0
            %assign f32CC2sc=-2147483648.0
          %endif
          %assign f32CC2sc = CAST("Number",f32CC2sc)
          %assign f32LowerLimit=-2147483648
          %assign f32UpperLimit=2147483647
          %assign c1f=SampleTime*0.5*wmax/3.141592653589793
          %assign u16NShiftI=FEVAL("ceil",FEVAL("log2",FEVAL("abs",c1f)))
          %if u16NShiftI<0.0
            %assign u16NShiftI=0.0
          %endif
          %if u16NShiftI>31.0
            %assign u16NShiftI=31.0
          %endif
          %assign u16NShiftI = CAST("Number",u16NShiftI)
          %assign f32C1=c1f*2147483648.0/CAST("Real",(1U << u16NShiftI))
          %if f32C1>2147483647.0
            %assign f32C1=2147483647.0
          %endif
          %if f32C1<-2147483648.0
            %assign f32C1=-2147483648.0
          %endif
          %assign f32C1 = CAST("Number",f32C1)
        %endif
        %if (resetStatesEnable == 1)
          %<s32ResetStates> = (tS32)1;
        %endif
        (%<pCtrl>)->pParamPI.f32CC1sc = (tFrac32)(%<f32CC1sc>);
        (%<pCtrl>)->pParamPI.f32CC2sc = (tFrac32)(%<f32CC2sc>);
        (%<pCtrl>)->pParamPI.f32UpperLimit = (tFrac32)(%<f32UpperLimit>);
        (%<pCtrl>)->pParamPI.f32LowerLimit = (tFrac32)(%<f32LowerLimit>);
        (%<pCtrl>)->pParamPI.u16NShift = (tU16)(%<u16NShiftPI>);
        (%<pCtrl>)->pParamInteg.f32C1 = (tFrac32)(%<f32C1>);
        (%<pCtrl>)->pParamInteg.u16NShift = (tU16)(%<u16NShiftI>);
        AMCLIB_TrackObsrvInit_F32((AMCLIB_TRACK_OBSRV_T_F32 *)(%<pCtrl>));
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign f32PhaseErr = LibBlockInputSignal(0, "", "", 0)
        %assign f32VelocityOut = LibBlockInputSignal(1, "", "", 0)
        %assign f32PosOut = LibBlockInputSignal(2, "", "", 0)
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign s32ResetStates = LibBlockDWorkAddr(work2, "", "", 0)
        %assign f32CC1sc = LibBlockInputSignal(3, "", "", 0)
        %assign f32CC2sc = LibBlockInputSignal(4, "", "", 0)
        %assign f32UpperLimit = LibBlockInputSignal(5, "", "", 0)
        %assign f32LowerLimit = LibBlockInputSignal(6, "", "", 0)
        %assign u16NShiftPI = LibBlockInputSignal(7, "", "", 0)
        %assign f32C1 = LibBlockInputSignal(8, "", "", 0)
        %assign u16NShiftI = LibBlockInputSignal(9, "", "", 0)
        %assign f32Acc = LibBlockInputSignal(10, "", "", 0)
        %assign f32InErrK1 = LibBlockInputSignal(11, "", "", 0)
        %assign f32State = LibBlockInputSignal(12, "", "", 0)
        %assign f32InK1 = LibBlockInputSignal(13, "", "", 0)
        %assign pPosEst = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign pVelocityEst = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign f32Acc_Out = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign f32InErrK1_Out = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign f32State_Out = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign f32InK1_Out = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %if (showStates == 2)
          %<LibReportFatalError("BAM blocks with shown debugging inputs/outputs are not supported in rapid accelerator mode.")>
        %endif
        AMCLIB_TrackObsrv_SF_F32_wrapper_Output(%<f32PhaseErr>, %<f32VelocityOut>, %<f32PosOut>, %<pCtrl>, %<work1BUS_ptr>, %<s32ResetStates>, %<f32CC1sc>, %<f32CC2sc>, %<f32UpperLimit>, %<f32LowerLimit>, %<u16NShiftPI>, %<f32C1>, %<u16NShiftI>, %<f32Acc>, %<f32InErrK1>, %<f32State>, %<f32InK1>, %<pPosEst>, %<pVelocityEst>, %<f32Acc_Out>, %<f32InErrK1_Out>, %<f32State_Out>, %<f32InK1_Out>, %<showStates>, %<resetStatesEnable>);
    %else
        %assign f32PhaseErr = LibBlockInputSignal(0, "", "", 0)
        %assign f32VelocityOut = LibBlockInputSignal(1, "", "", 0)
        %assign f32PosOut = LibBlockInputSignal(2, "", "", 0)
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work2, "", "", 0)
        %assign f32CC1sc = LibBlockInputSignal(3, "", "", 0)
        %assign f32CC2sc = LibBlockInputSignal(4, "", "", 0)
        %assign f32UpperLimit = LibBlockInputSignal(5, "", "", 0)
        %assign f32LowerLimit = LibBlockInputSignal(6, "", "", 0)
        %assign u16NShiftPI = LibBlockInputSignal(7, "", "", 0)
        %assign f32C1 = LibBlockInputSignal(8, "", "", 0)
        %assign u16NShiftI = LibBlockInputSignal(9, "", "", 0)
        %assign f32Acc = LibBlockInputSignal(10, "", "", 0)
        %assign f32InErrK1 = LibBlockInputSignal(11, "", "", 0)
        %assign f32State = LibBlockInputSignal(12, "", "", 0)
        %assign f32InK1 = LibBlockInputSignal(13, "", "", 0)
        %assign pPosEst = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign pVelocityEst = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign f32Acc_Out = LibBlockOutputSignal(2, "", "", 0)
        %assign f32InErrK1_Out = LibBlockOutputSignal(3, "", "", 0)
        %assign f32State_Out = LibBlockOutputSignal(4, "", "", 0)
        %assign f32InK1_Out = LibBlockOutputSignal(5, "", "", 0)
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %% 
        %if (showStates == 2)
          (%<pCtrl>)->pParamPI.f32CC1sc = (tFrac32)(%<f32CC1sc>);
          (%<pCtrl>)->pParamPI.f32CC2sc = (tFrac32)(%<f32CC2sc>);
          (%<pCtrl>)->pParamPI.f32Acc = (tFrac32)(%<f32Acc>);
          (%<pCtrl>)->pParamPI.f32InErrK1 = (tFrac32)(%<f32InErrK1>);
          (%<pCtrl>)->pParamPI.f32UpperLimit = (tFrac32)(%<f32UpperLimit>);
          (%<pCtrl>)->pParamPI.f32LowerLimit = (tFrac32)(%<f32LowerLimit>);
          (%<pCtrl>)->pParamPI.u16NShift = (tU16)(%<u16NShiftPI>);
          (%<pCtrl>)->pParamInteg.f32State = (tFrac32)(%<f32State>);
          (%<pCtrl>)->pParamInteg.f32InK1 = (tFrac32)(%<f32InK1>);
          (%<pCtrl>)->pParamInteg.f32C1 = (tFrac32)(%<f32C1>);
          (%<pCtrl>)->pParamInteg.u16NShift = (tU16)(%<u16NShiftI>);
        %endif
        %if (resetStatesEnable == 1)
          if ((tS32)(%<s32ResetStates>) != (tS32)0)
          {
            %<s32ResetStates> = (tS32)0;
            AMCLIB_TrackObsrvSetState_F32((tFrac32)(%<f32PosOut>), (tFrac32)(%<f32VelocityOut>), (AMCLIB_TRACK_OBSRV_T_F32 *)(%<pCtrl>));
            *(%<pPosEst>) = (tFrac32)0;
            *(%<pVelocityEst>) = (tFrac32)0;
          }
        %endif
        AMCLIB_TrackObsrv_F32((tFrac32)(%<f32PhaseErr>), (tFrac32 *)(%<pPosEst>), (tFrac32 *)(%<pVelocityEst>), (AMCLIB_TRACK_OBSRV_T_F32 *)(%<pCtrl>));
        %if (showStates == 2)
          %<f32Acc_Out> = ((AMCLIB_TRACK_OBSRV_T_F32 *)(%<pCtrl>))->pParamPI.f32Acc;
          %<f32InErrK1_Out> = ((AMCLIB_TRACK_OBSRV_T_F32 *)(%<pCtrl>))->pParamPI.f32InErrK1;
          %<f32State_Out> = ((AMCLIB_TRACK_OBSRV_T_F32 *)(%<pCtrl>))->pParamInteg.f32State;
          %<f32InK1_Out> = ((AMCLIB_TRACK_OBSRV_T_F32 *)(%<pCtrl>))->pParamInteg.f32InK1;   
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_TrackObsrv_SF_F32_wrapper_freemem(%<work1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
