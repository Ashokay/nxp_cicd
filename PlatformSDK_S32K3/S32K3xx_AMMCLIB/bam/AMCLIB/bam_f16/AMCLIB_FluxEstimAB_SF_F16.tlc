%% file : AMCLIB_FluxEstimAB_SF_F16.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for AMCLIB_FluxEstimAB_SF_F16
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 12-Sep-2023 09:22:02

%% Copyright 2021-2023 NXP
%%
%% NXP Confidential and Proprietary. This software is owned or controlled by NXP and may only be
%% used strictly in accordance with the applicable license terms.  By expressly accepting such
%% terms or by downloading, installing, activating and/or otherwise using the software, you are
%% agreeing that you have read, and that you agree to comply with and are bound by, such license
%% terms. If you do not agree to be bound by the applicable license terms, then you may not retain,
%% install, activate or otherwise use the software.

%implements AMCLIB_FluxEstimAB_SF_F16 "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("AMCLIB_FluxEstimAB_SF_F16_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int AMCLIB_FluxEstimAB_SF_F16_wrapper_allocmem(void** u2BUS, int_T u2BUSWidth, void** u3BUS, int_T u3BUSWidth, void** work1BUS, int_T work1BUSWidth);
        extern int AMCLIB_FluxEstimAB_SF_F16_wrapper_freemem(void** u2BUS, void** u3BUS, void** work1BUS);

        extern void AMCLIB_FluxEstimAB_SF_F16_wrapper_InitializeConditions(const int16_T p2, const int16_T p3, const uint16_T p4,  void* work1, void* work1BUS, const real_T p5, const real_T p6, const real_T p7, const real_T p8, const real_T p9, const real_T p10, const int32_T p11);
        extern void AMCLIB_FluxEstimAB_SF_F16_wrapper_Output( int16_T* y1, const int16_T u1, const void* u2, void* u2BUS, const void* u3, void* u3BUS, const int16_T u4, const int16_T u5, const uint16_T u6, const int32_T p1,  void* work1, void* work1BUS);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("AMCLIB_FluxEstimAB_SF_F16_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "amclib.h"
        #include "gflib.h"

        #include "SWLIBS_Typedefs.h"
        #include "AMCLIB_FluxEstimAB.h"

        int AMCLIB_FluxEstimAB_SF_F16_wrapper_allocmem(void** u2BUS, int_T u2BUSWidth, void** u3BUS, int_T u3BUSWidth, void** work1BUS, int_T work1BUSWidth) {
            *u2BUS = calloc(sizeof(SWLIBS_2Syst_F16), u2BUSWidth);
            if (*u2BUS==NULL) return -1;
            *u3BUS = calloc(sizeof(SWLIBS_2Syst_F16), u3BUSWidth);
            if (*u3BUS==NULL) return -1;
            *work1BUS = calloc(sizeof(AMCLIB_FLUXESTIMAB_T_F16), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            return 0;
        }
        
        int AMCLIB_FluxEstimAB_SF_F16_wrapper_freemem(void** u2BUS, void** u3BUS, void** work1BUS) {
            if (*u2BUS!=NULL) free(*u2BUS);
            *u2BUS = NULL;
            if (*u3BUS!=NULL) free(*u3BUS);
            *u3BUS = NULL;
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            return 0;
        }

        void AMCLIB_FluxEstimAB_SF_F16_wrapper_InitializeConditions(const int16_T p2, const int16_T p3, const uint16_T p4,  void* work1, void* work1BUS, const real_T p5, const real_T p6, const real_T p7, const real_T p8, const real_T p9, const real_T p10, const int32_T p11) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(AMCLIB_FLUXESTIMAB_T_F16 *)work1BUS)", "(char *)work1", 0)>

            ((AMCLIB_FLUXESTIMAB_T_F16 *const)(work1BUS))->f16KRs = (tFrac16)(p2);
            ((AMCLIB_FLUXESTIMAB_T_F16 *const)(work1BUS))->f16KLs = (tFrac16)(p3);
            ((AMCLIB_FLUXESTIMAB_T_F16 *const)(work1BUS))->u16NShift = (tU16)(p4);

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(AMCLIB_FLUXESTIMAB_T_F16 *)work1BUS)", 0)>
        }

        void AMCLIB_FluxEstimAB_SF_F16_wrapper_Output( int16_T* y1, const int16_T u1, const void* u2, void* u2BUS, const void* u3, void* u3BUS, const int16_T u4, const int16_T u5, const uint16_T u6, const int32_T p1,  void* work1, void* work1BUS) {

            /* Assign the Simulink structure u2 to user structure u2BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_F16 *)u2BUS)", "(char *)u2", 0)>


            /* Assign the Simulink structure u3 to user structure u3BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_F16 *)u3BUS)", "(char *)u3", 0)>


            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(AMCLIB_FLUXESTIMAB_T_F16 *)work1BUS)", "(char *)work1", 0)>

            if((tS32)2 == (tS32)(p1))
            {
              ((AMCLIB_FLUXESTIMAB_T_F16 *const)(work1BUS))->f16KRs = (tFrac16)(u4);
              ((AMCLIB_FLUXESTIMAB_T_F16 *const)(work1BUS))->f16KLs = (tFrac16)(u5);
              ((AMCLIB_FLUXESTIMAB_T_F16 *const)(work1BUS))->u16NShift = (tU16)(u6);
            }
            *((tFrac16 *)y1) = AMCLIB_FluxEstimAB_F16((tFrac16)(u1), (const SWLIBS_2Syst_F16 *const)(u2BUS), (const SWLIBS_2Syst_F16 *const)(u3BUS), (AMCLIB_FLUXESTIMAB_T_F16 *const)(work1BUS));

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(AMCLIB_FLUXESTIMAB_T_F16 *)work1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("amclib.h")>
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("AMCLIB_FluxEstimAB.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u2BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u3BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_FluxEstimAB_SF_F16_wrapper_allocmem(%<u2BUS_addr>, %<LibBlockInputSignalWidth(1)>, %<u3BUS_addr>, %<LibBlockInputSignalWidth(2)>, %<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign f16KRs = CAST("Number",Parameter[1].Value[0])
        %assign f16KLs = CAST("Number",Parameter[2].Value[0])
        %assign u16NShift = CAST("Number",Parameter[3].Value[0])
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign Rs = CAST("Real",Parameter[4].Value[0])
        %assign Ls = CAST("Real",Parameter[5].Value[0])
        %assign mechspeed = CAST("Real",Parameter[6].Value[0])
        %assign polepairs = CAST("Real",Parameter[7].Value[0])
        %assign uscale = CAST("Real",Parameter[8].Value[0])
        %assign iscale = CAST("Real",Parameter[9].Value[0])
        %assign autoCalcEn = CAST("Number",Parameter[10].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %if(autoCalcEn == 1)
          %assign wmax=polepairs*mechspeed*1.047197551196598e-01
          %assign Rssc=Rs*iscale/uscale
          %assign Lssc=Ls*wmax*iscale/uscale
          %assign u16NShift=FEVAL("ceil",FEVAL("log2",FEVAL("abs",Rssc)))
          %assign u16NShift_tmp=FEVAL("ceil",FEVAL("log2",FEVAL("abs",Lssc)))
          %if u16NShift<u16NShift_tmp
            %assign u16NShift=u16NShift_tmp
          %endif
          %if u16NShift<0.0
            %assign u16NShift=0.0
          %endif
          %if u16NShift>15.0
            %assign u16NShift=15.0
          %endif
          %assign u16NShift = CAST("Number",u16NShift)
          %assign f16KRs=Rssc*32768.0/CAST("Real",(1U << u16NShift))
          %if f16KRs>32767.0
            %assign f16KRs=32767.0
          %endif
          %if f16KRs<-32768.0
            %assign f16KRs=-32768.0
          %endif
          %assign f16KRs = CAST("Number",f16KRs)
          %assign f16KLs=Lssc*32768.0/CAST("Real",(1U << u16NShift))
          %if f16KLs>32767.0
            %assign f16KLs=32767.0
          %endif
          %if f16KLs<-32768.0
            %assign f16KLs=-32768.0
          %endif
          %assign f16KLs = CAST("Number",f16KLs)
        %endif
        AMCLIB_FluxEstimAB_SF_F16_wrapper_InitializeConditions(%<f16KRs>, %<f16KLs>, %<u16NShift>, %<pParam>, %<work1BUS_ptr>, %<Rs>, %<Ls>, %<mechspeed>, %<polepairs>, %<uscale>, %<iscale>, %<autoCalcEn>);
    %else
        %assign f16KRs = CAST("Number",Parameter[1].Value[0])
        %assign f16KLs = CAST("Number",Parameter[2].Value[0])
        %assign u16NShift = CAST("Number",Parameter[3].Value[0])
        %assign pParam = LibBlockDWork(work1, "", "", 0)
        %assign Rs = CAST("Real",Parameter[4].Value[0])
        %assign Ls = CAST("Real",Parameter[5].Value[0])
        %assign mechspeed = CAST("Real",Parameter[6].Value[0])
        %assign polepairs = CAST("Real",Parameter[7].Value[0])
        %assign uscale = CAST("Real",Parameter[8].Value[0])
        %assign iscale = CAST("Real",Parameter[9].Value[0])
        %assign autoCalcEn = CAST("Number",Parameter[10].Value[0])
        %% 
        %if(autoCalcEn == 1)
          %assign wmax=polepairs*mechspeed*1.047197551196598e-01
          %assign Rssc=Rs*iscale/uscale
          %assign Lssc=Ls*wmax*iscale/uscale
          %assign u16NShift=FEVAL("ceil",FEVAL("log2",FEVAL("abs",Rssc)))
          %assign u16NShift_tmp=FEVAL("ceil",FEVAL("log2",FEVAL("abs",Lssc)))
          %if u16NShift<u16NShift_tmp
            %assign u16NShift=u16NShift_tmp
          %endif
          %if u16NShift<0.0
            %assign u16NShift=0.0
          %endif
          %if u16NShift>15.0
            %assign u16NShift=15.0
          %endif
          %assign u16NShift = CAST("Number",u16NShift)
          %assign f16KRs=Rssc*32768.0/CAST("Real",(1U << u16NShift))
          %if f16KRs>32767.0
            %assign f16KRs=32767.0
          %endif
          %if f16KRs<-32768.0
            %assign f16KRs=-32768.0
          %endif
          %assign f16KRs = CAST("Number",f16KRs)
          %assign f16KLs=Lssc*32768.0/CAST("Real",(1U << u16NShift))
          %if f16KLs>32767.0
            %assign f16KLs=32767.0
          %endif
          %if f16KLs<-32768.0
            %assign f16KLs=-32768.0
          %endif
          %assign f16KLs = CAST("Number",f16KLs)
        %endif
        (%<pParam>).f16KRs = (tFrac16)(%<f16KRs>);
        (%<pParam>).f16KLs = (tFrac16)(%<f16KLs>);
        (%<pParam>).u16NShift = (tU16)(%<u16NShift>);
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign retVal = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign f16Velocity = LibBlockInputSignal(0, "", "", 0)
        %assign pIAB = LibBlockInputSignalAddr(1, "", "", 0)
        %assign u2BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign pUAB = LibBlockInputSignalAddr(2, "", "", 0)
        %assign u3BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign f16KRs = LibBlockInputSignal(3, "", "", 0)
        %assign f16KLs = LibBlockInputSignal(4, "", "", 0)
        %assign u16NShift = LibBlockInputSignal(5, "", "", 0)
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 2)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %if (showStates == 2)
          %<LibReportFatalError("BAM blocks with shown debugging inputs/outputs are not supported in rapid accelerator mode.")>
        %endif
        AMCLIB_FluxEstimAB_SF_F16_wrapper_Output(%<retVal>, %<f16Velocity>, %<pIAB>, %<u2BUS_ptr>, %<pUAB>, %<u3BUS_ptr>, %<f16KRs>, %<f16KLs>, %<u16NShift>, %<showStates>, %<pParam>, %<work1BUS_ptr>);
    %else
        %assign retVal = LibBlockOutputSignal(0, "", "", 0)
        %assign f16Velocity = LibBlockInputSignal(0, "", "", 0)
        %assign pIAB = LibBlockInputSignalAddr(1, "", "", 0)
        %assign pUAB = LibBlockInputSignalAddr(2, "", "", 0)
        %assign f16KRs = LibBlockInputSignal(3, "", "", 0)
        %assign f16KLs = LibBlockInputSignal(4, "", "", 0)
        %assign u16NShift = LibBlockInputSignal(5, "", "", 0)
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %% 
    %if (showStates == 2)
      (%<pParam>)->f16KRs = (tFrac16)(%<f16KRs>);
      (%<pParam>)->f16KLs = (tFrac16)(%<f16KLs>);
      (%<pParam>)->u16NShift = (tU16)(%<u16NShift>);
    %endif
    %<retVal> = AMCLIB_FluxEstimAB_F16((tFrac16)(%<f16Velocity>), (const SWLIBS_2Syst_F16 *const)(%<pIAB>), (const SWLIBS_2Syst_F16 *const)(%<pUAB>), (AMCLIB_FLUXESTIMAB_T_F16 *const)(%<pParam>));
    %endif
%endfunction


%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u3BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_FluxEstimAB_SF_F16_wrapper_freemem(%<u2BUSBUS_addr>, %<u3BUSBUS_addr>, %<work1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
