%% file : AMCLIB_FW_SF_F16.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for AMCLIB_FW_SF_F16
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 12-Sep-2023 09:22:21

%% Copyright 2019-2023 NXP
%%
%% NXP Confidential and Proprietary. This software is owned or controlled by NXP and may only be
%% used strictly in accordance with the applicable license terms.  By expressly accepting such
%% terms or by downloading, installing, activating and/or otherwise using the software, you are
%% agreeing that you have read, and that you agree to comply with and are bound by, such license
%% terms. If you do not agree to be bound by the applicable license terms, then you may not retain,
%% install, activate or otherwise use the software.

%implements AMCLIB_FW_SF_F16 "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("AMCLIB_FW_SF_F16_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int AMCLIB_FW_SF_F16_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** work1BUS, int_T work1BUSWidth, void** work2BUS, int_T work2BUSWidth, void** work3BUS, int_T work3BUSWidth);
        extern int AMCLIB_FW_SF_F16_wrapper_freemem(void** y1BUS, void** work1BUS, void** work2BUS, void** work3BUS);

        extern void AMCLIB_FW_SF_F16_wrapper_InitializeConditions( void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int16_T* work4, const uint16_T p4, const int32_T p5, const int16_T p6, const int16_T p7, const int16_T p8, const int16_T p9, const int16_T p10, const int32_T p1, const int32_T p2, const int32_T p3, const real_T p11, const real_T p12, const real_T p13, const real_T p14, const real_T p15, const real_T p16, const real_T p17, const real_T p18, const real_T p19, const real_T p20, const int32_T p21);
        extern void AMCLIB_FW_SF_F16_wrapper_Output(const int16_T u1, const int16_T u2,  void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int16_T* work4, const int16_T* u3, const int16_T* u4, const int16_T* u5, const int16_T u6, const int16_T u7, const uint16_T u8, const int16_T u9, const int16_T u10, const int16_T u11, const int16_T u12, const int16_T u13, const int16_T u14, const int16_T u15, const int32_T u16, const int32_T u17, const int16_T u18,  void* y1, void* y1BUS,  uint16_T* y2,  int16_T* y3,  int16_T* y4,  int16_T* y5,  int16_T* y6,  int16_T* y7,  int16_T* y8,  int16_T* y9,  int16_T* y10,  int32_T* y11,  int32_T* y12,  int16_T* y13, const int32_T p1, const int32_T p2, const int32_T p3);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("AMCLIB_FW_SF_F16_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "amclib.h"
        #include "gdflib.h"
        #include "gflib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GDFLIB_FilterMA.h"
        #include "GFLIB_ControllerPIpAW.h"

        int AMCLIB_FW_SF_F16_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** work1BUS, int_T work1BUSWidth, void** work2BUS, int_T work2BUSWidth, void** work3BUS, int_T work3BUSWidth) {
            *y1BUS = calloc(sizeof(SWLIBS_2Syst_F16), y1BUSWidth);
            if (*y1BUS==NULL) return -1;
            *work1BUS = calloc(sizeof(SWLIBS_2Syst_F16), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            *work2BUS = calloc(sizeof(GDFLIB_FILTER_MA_T_F16), work2BUSWidth);
            if (*work2BUS==NULL) return -1;
            *work3BUS = calloc(sizeof(GFLIB_CONTROLLER_PIAW_P_T_F16), work3BUSWidth);
            if (*work3BUS==NULL) return -1;
            return 0;
        }
        
        int AMCLIB_FW_SF_F16_wrapper_freemem(void** y1BUS, void** work1BUS, void** work2BUS, void** work3BUS) {
            if (*y1BUS!=NULL) free(*y1BUS);
            *y1BUS = NULL;
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            if (*work2BUS!=NULL) free(*work2BUS);
            *work2BUS = NULL;
            if (*work3BUS!=NULL) free(*work3BUS);
            *work3BUS = NULL;
            return 0;
        }

        void AMCLIB_FW_SF_F16_wrapper_InitializeConditions( void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int16_T* work4, const uint16_T p4, const int32_T p5, const int16_T p6, const int16_T p7, const int16_T p8, const int16_T p9, const int16_T p10, const int32_T p1, const int32_T p2, const int32_T p3, const real_T p11, const real_T p12, const real_T p13, const real_T p14, const real_T p15, const real_T p16, const real_T p17, const real_T p18, const real_T p19, const real_T p20, const int32_T p21) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_F16 *)work1BUS)", "(char *)work1", 0)>


            /* Assign the Simulink structure work2 to user structure work2BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_MA_T_F16 *)work2BUS)", "(char *)work2", 0)>


            /* Assign the Simulink structure work3 to user structure work3BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_P_T_F16 *)work3BUS)", "(char *)work3", 0)>

            AMCLIB_FW_T_F16 f16FWStateStr;
            
            /* Copy parameters to Simulink states */
            ((GDFLIB_FILTER_MA_T_F16 *)(work2BUS))->u16NSamples = (tU16)(p4);
            ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16PropGain = (tFrac16)(p5);
            ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16IntegGain = (tFrac16)(p6);
            ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->s16PropGainShift = (tS16)(p7);
            ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->s16IntegGainShift = (tS16)(p8);
            ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16LowerLimit = (tFrac16)(p9);
            ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16UpperLimit = (tFrac16)(p10);
            
            /* Copy Simulink state parameters to state struct */
            f16FWStateStr.pFilterFW.u16NSamples = ((GDFLIB_FILTER_MA_T_F16 *)(work2BUS))->u16NSamples;
            f16FWStateStr.pPIpAWFW.f16PropGain = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16PropGain;
            f16FWStateStr.pPIpAWFW.f16IntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16IntegGain;
            f16FWStateStr.pPIpAWFW.s16PropGainShift = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->s16PropGainShift;
            f16FWStateStr.pPIpAWFW.s16IntegGainShift = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->s16IntegGainShift;
            f16FWStateStr.pPIpAWFW.f16LowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16LowerLimit;
            f16FWStateStr.pPIpAWFW.f16UpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16UpperLimit;
            
            AMCLIB_FWInit_F16(&f16FWStateStr);
            
            /* Set Simulink state to zero */
            ((SWLIBS_2Syst_F16 *)(work1BUS))->f16Arg1 = (tFrac16)0;
            ((SWLIBS_2Syst_F16 *)(work1BUS))->f16Arg2 = (tFrac16)0;
            
            /* Copy struct states to Simulink states */
            ((GDFLIB_FILTER_MA_T_F16 *)(work2BUS))->f32Acc = f16FWStateStr.pFilterFW.f32Acc;
            ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f32IntegPartK_1 = f16FWStateStr.pPIpAWFW.f32IntegPartK_1;
            ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16InK_1 = f16FWStateStr.pPIpAWFW.f16InK_1;
            
            if ((tS32)1 == (tS32)(p2))
            {
              *((tS16 *)work4) = (tS16)1;
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(SWLIBS_2Syst_F16 *)work1BUS)", 0)>

            /* Assign the user structure work2BUS to the Simulink structure work2 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work2", "(*(GDFLIB_FILTER_MA_T_F16 *)work2BUS)", 0)>

            /* Assign the user structure work3BUS to the Simulink structure work3 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work3", "(*(GFLIB_CONTROLLER_PIAW_P_T_F16 *)work3BUS)", 0)>
        }

        void AMCLIB_FW_SF_F16_wrapper_Output(const int16_T u1, const int16_T u2,  void* work1, void* work1BUS,  void* work2, void* work2BUS,  void* work3, void* work3BUS,  int16_T* work4, const int16_T* u3, const int16_T* u4, const int16_T* u5, const int16_T u6, const int16_T u7, const uint16_T u8, const int16_T u9, const int16_T u10, const int16_T u11, const int16_T u12, const int16_T u13, const int16_T u14, const int16_T u15, const int32_T u16, const int32_T u17, const int16_T u18,  void* y1, void* y1BUS,  uint16_T* y2,  int16_T* y3,  int16_T* y4,  int16_T* y5,  int16_T* y6,  int16_T* y7,  int16_T* y8,  int16_T* y9,  int16_T* y10,  int32_T* y11,  int32_T* y12,  int16_T* y13, const int32_T p1, const int32_T p2, const int32_T p3) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_F16 *)work1BUS)", "(char *)work1", 0)>


            /* Assign the Simulink structure work2 to user structure work2BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_MA_T_F16 *)work2BUS)", "(char *)work2", 0)>


            /* Assign the Simulink structure work3 to user structure work3BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PIAW_P_T_F16 *)work3BUS)", "(char *)work3", 0)>

            AMCLIB_FW_T_F16 f16FWStateStr;
            AMCLIB_FW_DEBUG_T_F16 f16FWDebugStateStr;
            
            if((tS32)2 == (tS32)(p1))
            {
              /* Copy inputs to Simulink states */
              ((SWLIBS_2Syst_F16 *)(work1BUS))->f16Arg2 = (tFrac16)(u15);
              ((GDFLIB_FILTER_MA_T_F16 *)(work2BUS))->f32Acc = (tFrac32)(u16);
              ((GDFLIB_FILTER_MA_T_F16 *)(work2BUS))->u16NSamples = (tU16)(u8);
              ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16PropGain = (tFrac16)(u9);
              ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16IntegGain = (tFrac16)(u10);
              ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->s16PropGainShift = (tS16)(u11);
              ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->s16IntegGainShift = (tS16)(u12);
              ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16LowerLimit = (tFrac16)(u13);
              ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16UpperLimit = (tFrac16)(u14);
              ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f32IntegPartK_1 = (tFrac32)(u17);
              ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16InK_1 = (tFrac16)(u18);
            
              /* Copy Simulink states to DEBUG struct states */
              f16FWDebugStateStr.pFilterFW.f32Acc = ((GDFLIB_FILTER_MA_T_F16 *)(work2BUS))->f32Acc;
              f16FWDebugStateStr.pFilterFW.u16NSamples = ((GDFLIB_FILTER_MA_T_F16 *)(work2BUS))->u16NSamples;
              f16FWDebugStateStr.pPIpAWFW.f16PropGain = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16PropGain;
              f16FWDebugStateStr.pPIpAWFW.f16IntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16IntegGain;
              f16FWDebugStateStr.pPIpAWFW.s16PropGainShift = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->s16PropGainShift;
              f16FWDebugStateStr.pPIpAWFW.s16IntegGainShift = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->s16IntegGainShift;
              f16FWDebugStateStr.pPIpAWFW.f16LowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16LowerLimit;
              f16FWDebugStateStr.pPIpAWFW.f16UpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16UpperLimit;
              f16FWDebugStateStr.pPIpAWFW.f32IntegPartK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f32IntegPartK_1;
              f16FWDebugStateStr.pPIpAWFW.f16InK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16InK_1;
              
              /* Copy inputs to DEBUG struct states */
              f16FWDebugStateStr.pIQFbck = (tFrac16 *)(u3);
              f16FWDebugStateStr.pUQReq = (tFrac16 *)(u4);
              f16FWDebugStateStr.pUQLim = (tFrac16 *)(u5);
            }
            
            /* Copy Simulink states to struct states */
            f16FWStateStr.pFilterFW.f32Acc = ((GDFLIB_FILTER_MA_T_F16 *)(work2BUS))->f32Acc;
            f16FWStateStr.pFilterFW.u16NSamples = ((GDFLIB_FILTER_MA_T_F16 *)(work2BUS))->u16NSamples;
            f16FWStateStr.pPIpAWFW.f16PropGain = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16PropGain;
            f16FWStateStr.pPIpAWFW.f16IntegGain = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16IntegGain;
            f16FWStateStr.pPIpAWFW.s16PropGainShift = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->s16PropGainShift;
            f16FWStateStr.pPIpAWFW.s16IntegGainShift = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->s16IntegGainShift;
            f16FWStateStr.pPIpAWFW.f16LowerLimit = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16LowerLimit;
            f16FWStateStr.pPIpAWFW.f16UpperLimit = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16UpperLimit;
            f16FWStateStr.pPIpAWFW.f32IntegPartK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f32IntegPartK_1;
            f16FWStateStr.pPIpAWFW.f16InK_1 = ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16InK_1;
            
            /* Copy inputs to struct states */
            f16FWStateStr.pIQFbck = (tFrac16 *)(u3);
            f16FWStateStr.pUQReq = (tFrac16 *)(u4);
            f16FWStateStr.pUQLim = (tFrac16 *)(u5);
            
            if ((tS32)1 == (tS32)(p2))
            {
              if (*(tS16 *)(work4) != (tS16)0)
              {
                *((tS16 *)work4) = (tS16)0;
                AMCLIB_FWSetState_F16((tFrac16)(u6), (tFrac16)(u7), &f16FWStateStr);
                if((tS32)2 == (tS32)(p1))
                {
                  /* Copy struct states to DEBUG struct states */
                  f16FWDebugStateStr.pFilterFW.f32Acc = f16FWStateStr.pFilterFW.f32Acc;
                  f16FWDebugStateStr.pPIpAWFW.f32IntegPartK_1 = f16FWStateStr.pPIpAWFW.f32IntegPartK_1;
                  f16FWDebugStateStr.pPIpAWFW.f16InK_1 = f16FWStateStr.pPIpAWFW.f16InK_1;
                }
              }
            }
            if((tS32)2 == (tS32)(p1))
            {
              AMCLIB_FWDebug_F16((tFrac16)(u1), (tFrac16)(u2), (SWLIBS_2Syst_F16 *)(work1BUS), &f16FWDebugStateStr);
            }
            else
            {
              AMCLIB_FW_F16((tFrac16)(u1), (tFrac16)(u2), (SWLIBS_2Syst_F16 *)(work1BUS), &f16FWStateStr);
            }
            
            /* Copy Simulink states to output */
            ((SWLIBS_2Syst_F16 *)(y1BUS))->f16Arg1 = ((SWLIBS_2Syst_F16 *)(work1BUS))->f16Arg1;
            ((SWLIBS_2Syst_F16 *)(y1BUS))->f16Arg2 = ((SWLIBS_2Syst_F16 *)(work1BUS))->f16Arg2;
            
            if((tS32)2 == (tS32)(p1))
            {
              /* Copy DEBUG struct states to Simulink states */
              ((GDFLIB_FILTER_MA_T_F16 *)(work2BUS))->f32Acc = f16FWDebugStateStr.pFilterFW.f32Acc;
              ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f32IntegPartK_1 = f16FWDebugStateStr.pPIpAWFW.f32IntegPartK_1;
              ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16InK_1 = f16FWDebugStateStr.pPIpAWFW.f16InK_1;
            
              /* Copy DEBUG struct states to outputs */
              *((tU16 *)y2) = f16FWDebugStateStr.pPIpAWFW.u16LimitFlag;
              *((tFrac16 *)y3) = f16FWDebugStateStr.f16IQErrSign;
              *((tFrac16 *)y4) = f16FWDebugStateStr.f16IQErr;
              *((tFrac16 *)y5) = f16FWDebugStateStr.f16FWErr;
              *((tFrac16 *)y6) = f16FWDebugStateStr.f16UQErr;
              *((tFrac16 *)y7) = f16FWDebugStateStr.f16FWErrFilt;
              *((tFrac16 *)y8) = f16FWDebugStateStr.f16FWAngle;
              *((tFrac16 *)y9) = f16FWDebugStateStr.f16FWSin;
              *((tFrac16 *)y10) = f16FWDebugStateStr.f16FWCos;
              *((tFrac32 *)y11) = f16FWDebugStateStr.pFilterFW.f32Acc;
              *((tFrac32 *)y12) = f16FWDebugStateStr.pPIpAWFW.f32IntegPartK_1;
              *((tFrac16 *)y13) = f16FWDebugStateStr.pPIpAWFW.f16InK_1;
            }
            else
            {
              /* Copy struct states to Simulink states */
              ((GDFLIB_FILTER_MA_T_F16 *)(work2BUS))->f32Acc = f16FWStateStr.pFilterFW.f32Acc;
              ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f32IntegPartK_1 = f16FWStateStr.pPIpAWFW.f32IntegPartK_1;
              ((GFLIB_CONTROLLER_PIAW_P_T_F16 *)(work3BUS))->f16InK_1 = f16FWStateStr.pPIpAWFW.f16InK_1;
            
              /* Copy struct states to outputs */
              *((tU16 *)y2) = f16FWStateStr.pPIpAWFW.u16LimitFlag;
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(SWLIBS_2Syst_F16 *)work1BUS)", 0)>

            /* Assign the user structure work2BUS to the Simulink structure work2 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work2)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work2", "(*(GDFLIB_FILTER_MA_T_F16 *)work2BUS)", 0)>

            /* Assign the user structure work3BUS to the Simulink structure work3 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work3)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work3", "(*(GFLIB_CONTROLLER_PIAW_P_T_F16 *)work3BUS)", 0)>

            /* Assign the user structure y1BUS to the Simulink structure y1 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y1", "(*(SWLIBS_2Syst_F16 *)y1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("amclib.h")>
        %<LibAddToCommonIncludes("gdflib.h")>
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GDFLIB_FilterMA.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIpAW.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %assign cDataFile = LibCreateSourceFile("Source", "Simulink", CompiledModel.Name)
        %openfile tmpParamBuf
          AMCLIB_FW_T_F16 f16FWStateStr_%<SYSNAME(Name)[0]>;
          AMCLIB_FW_DEBUG_T_F16 f16FWDebugStateStr_%<SYSNAME(Name)[0]>;
        %closefile tmpParamBuf
        %<LibSetSourceFileSection(cDataFile, "Definitions", tmpParamBuf)>
        %assign cHeaderFile = LibCreateSourceFile("Header", "Simulink", CompiledModel.Name)
        %openfile tmpParamBuf
          extern AMCLIB_FW_T_F16 f16FWStateStr_%<SYSNAME(Name)[0]>;
          extern AMCLIB_FW_DEBUG_T_F16 f16FWDebugStateStr_%<SYSNAME(Name)[0]>;
        %closefile tmpParamBuf
        %<LibSetSourceFileSection(cHeaderFile, "Declarations", tmpParamBuf)>
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work2BUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign work3BUS_addr = "&" + LibBlockPWork("", "", "", 3)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_FW_SF_F16_wrapper_allocmem(%<y1BUS_addr>, %<LibBlockOutputSignalWidth(0)>, %<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>, %<work2BUS_addr>, %<LibBlockDWorkWidth(work2)>, %<work3BUS_addr>, %<LibBlockDWorkWidth(work3)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign pIDQReqState = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign pFilterFW = LibBlockDWorkAddr(work2, "", "", 0)
        %assign work2BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign pPIpAWFW = LibBlockDWorkAddr(work3, "", "", 0)
        %assign work3BUS_ptr = LibBlockPWork("", "", "", 3)
        %assign s16ResetStates = LibBlockDWorkAddr(work4, "", "", 0)
        %assign u16NSamples = CAST("Number",Parameter[3].Value[0])
        %assign f16PropGain = CAST("Number",Parameter[4].Value[0])
        %assign f16IntegGain = CAST("Number",Parameter[5].Value[0])
        %assign s16PropGainShift = CAST("Number",Parameter[6].Value[0])
        %assign s16IntegGainShift = CAST("Number",Parameter[7].Value[0])
        %assign f16LowerLimit = CAST("Number",Parameter[8].Value[0])
        %assign f16UpperLimit = CAST("Number",Parameter[9].Value[0])
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %assign showDebugOutputs = CAST("Number",Parameter[2].Value[0])
        %assign wf0 = CAST("Real",Parameter[10].Value[0])
        %assign wksi = CAST("Real",Parameter[11].Value[0])
        %assign J = CAST("Real",Parameter[12].Value[0])
        %assign Kt = CAST("Real",Parameter[13].Value[0])
        %assign lambdaFW = CAST("Real",Parameter[14].Value[0])
        %assign Idmax = CAST("Real",Parameter[15].Value[0])
        %assign mechspeed = CAST("Real",Parameter[16].Value[0])
        %assign polepairs = CAST("Real",Parameter[17].Value[0])
        %assign uscale = CAST("Real",Parameter[18].Value[0])
        %assign iscale = CAST("Real",Parameter[19].Value[0])
        %assign autoCalcEn = CAST("Number",Parameter[20].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %assign SampleTime = LibBlockSampleTime(block)
        %if(autoCalcEn == 1)
          %assign w0=6.283185307179586*wf0
          %assign pgain=2.0*wksi*w0*J/Kt
          %assign igain=w0*w0*J/Kt
          %assign wmax=polepairs*mechspeed*0.1047197551196598
          %assign kif=igain*SampleTime*0.5*wmax/iscale
          %assign fwkpf=0.9*pgain*wmax/iscale
          %assign s16PropGainShift=FEVAL("ceil",FEVAL("log2",FEVAL("abs",fwkpf)))
          %if s16PropGainShift<-15.0
            %assign s16PropGainShift=-15.0
          %endif
          %if s16PropGainShift>15.0
            %assign s16PropGainShift=15.0
          %endif
          %assign s16PropGainShift = CAST("Number",s16PropGainShift)
          %if s16PropGainShift<0
            %assign f16PropGain=fwkpf*32768.0*CAST("Real",(1U << (-s16PropGainShift)))
          %else
            %assign f16PropGain=fwkpf*32768.0/CAST("Real",(1U << s16PropGainShift))
          %endif
          %if f16PropGain>32767.0
            %assign f16PropGain=32767.0
          %endif
          %if f16PropGain<-32768.0
            %assign f16PropGain=-32768.0
          %endif
          %assign f16PropGain = CAST("Number",f16PropGain)
          %assign s16IntegGainShift=FEVAL("ceil",FEVAL("log2",FEVAL("abs",kif)))
          %if s16IntegGainShift<-15.0
            %assign s16IntegGainShift=-15.0
          %endif
          %if s16IntegGainShift>15.0
            %assign s16IntegGainShift=15.0
          %endif
          %assign s16IntegGainShift = CAST("Number",s16IntegGainShift)
          %if s16IntegGainShift<0
            %assign f16IntegGain=kif*32768.0*CAST("Real",(1U << (-s16IntegGainShift)))
          %else
            %assign f16IntegGain=kif*32768.0/CAST("Real",(1U << s16IntegGainShift))
          %endif
          %if f16IntegGain>32767.0
            %assign f16IntegGain=32767.0
          %endif
          %if f16IntegGain<-32768.0
            %assign f16IntegGain=-32768.0
          %endif
          %assign f16IntegGain = CAST("Number",f16IntegGain)
          %if (Idmax<0)
            %assign iratio=FEVAL("abs",Idmax)/iscale
            %if (FEVAL("abs",iratio) > 1)
              %assign iratio = 0
            %endif
            %assign lowlim=0.3183098861837907*FEVAL("acos",iratio)-0.5
          %else
            %assign lowlim=0.0
          %endif
          %assign f16LowerLimit=lowlim*32768.0
          %if f16LowerLimit>32767.0
            %assign f16LowerLimit=32767.0
          %endif
          %if f16LowerLimit<-32768.0
            %assign f16LowerLimit=-32768.0
          %endif
          %assign f16LowerLimit = CAST("Number",f16LowerLimit)
          %assign f16UpperLimit=0
          %assign u16NSamples=FEVAL("round",FEVAL("log2",(1.0/FEVAL("abs",lambdaFW))))
          %if u16NSamples<0.0
            %assign u16NSamples=0.0
          %endif
          %if u16NSamples>15.0
            %assign u16NSamples=15.0
          %endif
          %assign u16NSamples = CAST("Number",u16NSamples)
        %endif
        AMCLIB_FW_SF_F16_wrapper_InitializeConditions(%<pIDQReqState>, %<work1BUS_ptr>, %<pFilterFW>, %<work2BUS_ptr>, %<pPIpAWFW>, %<work3BUS_ptr>, %<s16ResetStates>, %<u16NSamples>, %<f16PropGain>, %<f16IntegGain>, %<s16PropGainShift>, %<s16IntegGainShift>, %<f16LowerLimit>, %<f16UpperLimit>, %<showStates>, %<resetStatesEnable>, %<showDebugOutputs>, %<wf0>, %<wksi>, %<J>, %<Kt>, %<lambdaFW>, %<Idmax>, %<mechspeed>, %<polepairs>, %<uscale>, %<iscale>, %<autoCalcEn>);
    %else
        %assign pIDQReqState = LibBlockDWork(work1, "", "", 0)
        %assign pFilterFW = LibBlockDWork(work2, "", "", 0)
        %assign pPIpAWFW = LibBlockDWork(work3, "", "", 0)
        %assign s16ResetStates = LibBlockDWork(work4, "", "", 0)
        %assign u16NSamples = CAST("Number",Parameter[3].Value[0])
        %assign f16PropGain = CAST("Number",Parameter[4].Value[0])
        %assign f16IntegGain = CAST("Number",Parameter[5].Value[0])
        %assign s16PropGainShift = CAST("Number",Parameter[6].Value[0])
        %assign s16IntegGainShift = CAST("Number",Parameter[7].Value[0])
        %assign f16LowerLimit = CAST("Number",Parameter[8].Value[0])
        %assign f16UpperLimit = CAST("Number",Parameter[9].Value[0])
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %assign showDebugOutputs = CAST("Number",Parameter[2].Value[0])
        %assign wf0 = CAST("Real",Parameter[10].Value[0])
        %assign wksi = CAST("Real",Parameter[11].Value[0])
        %assign J = CAST("Real",Parameter[12].Value[0])
        %assign Kt = CAST("Real",Parameter[13].Value[0])
        %assign lambdaFW = CAST("Real",Parameter[14].Value[0])
        %assign Idmax = CAST("Real",Parameter[15].Value[0])
        %assign mechspeed = CAST("Real",Parameter[16].Value[0])
        %assign polepairs = CAST("Real",Parameter[17].Value[0])
        %assign uscale = CAST("Real",Parameter[18].Value[0])
        %assign iscale = CAST("Real",Parameter[19].Value[0])
        %assign autoCalcEn = CAST("Number",Parameter[20].Value[0])
        %% 
        %assign SampleTime = LibBlockSampleTime(block)
        %if(autoCalcEn == 1)
          %assign w0=6.283185307179586*wf0
          %assign pgain=2.0*wksi*w0*J/Kt
          %assign igain=w0*w0*J/Kt
          %assign wmax=polepairs*mechspeed*0.1047197551196598
          %assign kif=igain*SampleTime*0.5*wmax/iscale
          %assign fwkpf=0.9*pgain*wmax/iscale
          %assign s16PropGainShift=FEVAL("ceil",FEVAL("log2",FEVAL("abs",fwkpf)))
          %if s16PropGainShift<-15.0
            %assign s16PropGainShift=-15.0
          %endif
          %if s16PropGainShift>15.0
            %assign s16PropGainShift=15.0
          %endif
          %assign s16PropGainShift = CAST("Number",s16PropGainShift)
          %if s16PropGainShift<0
            %assign f16PropGain=fwkpf*32768.0*CAST("Real",(1U << (-s16PropGainShift)))
          %else
            %assign f16PropGain=fwkpf*32768.0/CAST("Real",(1U << s16PropGainShift))
          %endif
          %if f16PropGain>32767.0
            %assign f16PropGain=32767.0
          %endif
          %if f16PropGain<-32768.0
            %assign f16PropGain=-32768.0
          %endif
          %assign f16PropGain = CAST("Number",f16PropGain)
          %assign s16IntegGainShift=FEVAL("ceil",FEVAL("log2",FEVAL("abs",kif)))
          %if s16IntegGainShift<-15.0
            %assign s16IntegGainShift=-15.0
          %endif
          %if s16IntegGainShift>15.0
            %assign s16IntegGainShift=15.0
          %endif
          %assign s16IntegGainShift = CAST("Number",s16IntegGainShift)
          %if s16IntegGainShift<0
            %assign f16IntegGain=kif*32768.0*CAST("Real",(1U << (-s16IntegGainShift)))
          %else
            %assign f16IntegGain=kif*32768.0/CAST("Real",(1U << s16IntegGainShift))
          %endif
          %if f16IntegGain>32767.0
            %assign f16IntegGain=32767.0
          %endif
          %if f16IntegGain<-32768.0
            %assign f16IntegGain=-32768.0
          %endif
          %assign f16IntegGain = CAST("Number",f16IntegGain)
          %if (Idmax<0)
            %assign iratio=FEVAL("abs",Idmax)/iscale
            %if (FEVAL("abs",iratio) > 1)
              %assign iratio = 0
            %endif
            %assign lowlim=0.3183098861837907*FEVAL("acos",iratio)-0.5
          %else
            %assign lowlim=0.0
          %endif
          %assign f16LowerLimit=lowlim*32768.0
          %if f16LowerLimit>32767.0
            %assign f16LowerLimit=32767.0
          %endif
          %if f16LowerLimit<-32768.0
            %assign f16LowerLimit=-32768.0
          %endif
          %assign f16LowerLimit = CAST("Number",f16LowerLimit)
          %assign f16UpperLimit=0
          %assign u16NSamples=FEVAL("round",FEVAL("log2",(1.0/FEVAL("abs",lambdaFW))))
          %if u16NSamples<0.0
            %assign u16NSamples=0.0
          %endif
          %if u16NSamples>15.0
            %assign u16NSamples=15.0
          %endif
          %assign u16NSamples = CAST("Number",u16NSamples)
        %endif
        %if (showStates == 2)
          %if (showDebugOutputs == 2)
            /* Copy parameters to DEBUG state struct */
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.u16NSamples = (tU16)(%<u16NSamples>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16PropGain = (tFrac16)(%<f16PropGain>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16IntegGain = (tFrac16)(%<f16IntegGain>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16PropGainShift = (tS16)(%<s16PropGainShift>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16IntegGainShift = (tS16)(%<s16IntegGainShift>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16LowerLimit = (tFrac16)(%<f16LowerLimit>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16UpperLimit = (tFrac16)(%<f16UpperLimit>);
          %endif
        %endif
        
        /* Copy parameters to state struct */
        f16FWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.u16NSamples = (tU16)(%<u16NSamples>);
        f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16PropGain = (tFrac16)(%<f16PropGain>);
        f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16IntegGain = (tFrac16)(%<f16IntegGain>);
        f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16PropGainShift = (tS16)(%<s16PropGainShift>);
        f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16IntegGainShift = (tS16)(%<s16IntegGainShift>);
        f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16LowerLimit = (tFrac16)(%<f16LowerLimit>);
        f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16UpperLimit = (tFrac16)(%<f16UpperLimit>);
        
        AMCLIB_FWInit_F16(&f16FWStateStr_%<SYSNAME(Name)[0]>);
        
        /* Set Simulink state to zero */
        (%<pIDQReqState>).f16Arg1 = (tFrac16)0;
        (%<pIDQReqState>).f16Arg2 = (tFrac16)0;
        
        %if (showStates == 2)
          %if (showDebugOutputs == 2)
            /* Copy struct states to DEBUG struct states */
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc = f16FWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc;
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1 = f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1;
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16InK_1 = f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16InK_1;
          %endif
        %endif
        
        %if (resetStatesEnable == 1)
          %<s16ResetStates> = (tS16)1;
        %endif
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign f16IDQReqAmp = LibBlockInputSignal(0, "", "", 0)
        %assign f16VelocityFbck = LibBlockInputSignal(1, "", "", 0)
        %assign pIDQReqState = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign pFilterFW = LibBlockDWorkAddr(work2, "", "", 0)
        %assign work2BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign pPIpAWFW = LibBlockDWorkAddr(work3, "", "", 0)
        %assign work3BUS_ptr = LibBlockPWork("", "", "", 3)
        %assign s16ResetStates = LibBlockDWorkAddr(work4, "", "", 0)
        %assign f16IQFbck = LibBlockInputSignalAddr(2, "", "", 0)
        %assign f16UQReq = LibBlockInputSignalAddr(3, "", "", 0)
        %assign f16UQLim = LibBlockInputSignalAddr(4, "", "", 0)
        %assign f16FilterMAFWOut = LibBlockInputSignal(5, "", "", 0)
        %assign f16ControllerPIpAWFWOut = LibBlockInputSignal(6, "", "", 0)
        %assign u16NSamples = LibBlockInputSignal(7, "", "", 0)
        %assign f16PropGain = LibBlockInputSignal(8, "", "", 0)
        %assign f16IntegGain = LibBlockInputSignal(9, "", "", 0)
        %assign s16PropGainShift = LibBlockInputSignal(10, "", "", 0)
        %assign s16IntegGainShift = LibBlockInputSignal(11, "", "", 0)
        %assign f16LowerLimit = LibBlockInputSignal(12, "", "", 0)
        %assign f16UpperLimit = LibBlockInputSignal(13, "", "", 0)
        %assign f16IQReqK_1 = LibBlockInputSignal(14, "", "", 0)
        %assign f32Acc = LibBlockInputSignal(15, "", "", 0)
        %assign f32IntegPartK_1 = LibBlockInputSignal(16, "", "", 0)
        %assign f16InK_1 = LibBlockInputSignal(17, "", "", 0)
        %assign pIDQReq = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign u16LimitFlag = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign f16IQErrSign = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign f16IQErr = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign f16FWErr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign f16UQErr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign f16FWErrFilt = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign f16FWAngle = LibBlockOutputSignalAddr(7, "", "", 0)
        %assign f16FWSin = LibBlockOutputSignalAddr(8, "", "", 0)
        %assign f16FWCos = LibBlockOutputSignalAddr(9, "", "", 0)
        %assign f32Acc_Out = LibBlockOutputSignalAddr(10, "", "", 0)
        %assign f32IntegPartK_1_Out = LibBlockOutputSignalAddr(11, "", "", 0)
        %assign f16InK_1_Out = LibBlockOutputSignalAddr(12, "", "", 0)
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %assign showDebugOutputs = CAST("Number",Parameter[2].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %if (showStates == 2)
          %<LibReportFatalError("BAM blocks with shown debugging inputs/outputs are not supported in rapid accelerator mode.")>
        %endif
        AMCLIB_FW_SF_F16_wrapper_Output(%<f16IDQReqAmp>, %<f16VelocityFbck>, %<pIDQReqState>, %<work1BUS_ptr>, %<pFilterFW>, %<work2BUS_ptr>, %<pPIpAWFW>, %<work3BUS_ptr>, %<s16ResetStates>, %<f16IQFbck>, %<f16UQReq>, %<f16UQLim>, %<f16FilterMAFWOut>, %<f16ControllerPIpAWFWOut>, %<u16NSamples>, %<f16PropGain>, %<f16IntegGain>, %<s16PropGainShift>, %<s16IntegGainShift>, %<f16LowerLimit>, %<f16UpperLimit>, %<f16IQReqK_1>, %<f32Acc>, %<f32IntegPartK_1>, %<f16InK_1>, %<pIDQReq>, %<y1BUS_ptr>, %<u16LimitFlag>, %<f16IQErrSign>, %<f16IQErr>, %<f16FWErr>, %<f16UQErr>, %<f16FWErrFilt>, %<f16FWAngle>, %<f16FWSin>, %<f16FWCos>, %<f32Acc_Out>, %<f32IntegPartK_1_Out>, %<f16InK_1_Out>, %<showStates>, %<resetStatesEnable>, %<showDebugOutputs>);
    %else
        %assign f16IDQReqAmp = LibBlockInputSignal(0, "", "", 0)
        %assign f16VelocityFbck = LibBlockInputSignal(1, "", "", 0)
        %assign pIDQReqState = LibBlockDWorkAddr(work1, "", "", 0)
        %assign pFilterFW = LibBlockDWork(work2, "", "", 0)
        %assign pPIpAWFW = LibBlockDWork(work3, "", "", 0)
        %assign s16ResetStates = LibBlockDWork(work4, "", "", 0)
        %assign f16IQFbck = LibBlockInputSignalAddr(2, "", "", 0)
        %assign f16UQReq = LibBlockInputSignalAddr(3, "", "", 0)
        %assign f16UQLim = LibBlockInputSignalAddr(4, "", "", 0)
        %assign f16FilterMAFWOut = LibBlockInputSignal(5, "", "", 0)
        %assign f16ControllerPIpAWFWOut = LibBlockInputSignal(6, "", "", 0)
        %assign u16NSamples = LibBlockInputSignal(7, "", "", 0)
        %assign f16PropGain = LibBlockInputSignal(8, "", "", 0)
        %assign f16IntegGain = LibBlockInputSignal(9, "", "", 0)
        %assign s16PropGainShift = LibBlockInputSignal(10, "", "", 0)
        %assign s16IntegGainShift = LibBlockInputSignal(11, "", "", 0)
        %assign f16LowerLimit = LibBlockInputSignal(12, "", "", 0)
        %assign f16UpperLimit = LibBlockInputSignal(13, "", "", 0)
        %assign f16IQReqK_1 = LibBlockInputSignal(14, "", "", 0)
        %assign f32Acc = LibBlockInputSignal(15, "", "", 0)
        %assign f32IntegPartK_1 = LibBlockInputSignal(16, "", "", 0)
        %assign f16InK_1 = LibBlockInputSignal(17, "", "", 0)
        %assign pIDQReq = LibBlockOutputSignal(0, "", "", 0)
        %assign u16LimitFlag = LibBlockOutputSignal(1, "", "", 0)
        %assign f16IQErrSign = LibBlockOutputSignal(2, "", "", 0)
        %assign f16IQErr = LibBlockOutputSignal(3, "", "", 0)
        %assign f16FWErr = LibBlockOutputSignal(4, "", "", 0)
        %assign f16UQErr = LibBlockOutputSignal(5, "", "", 0)
        %assign f16FWErrFilt = LibBlockOutputSignal(6, "", "", 0)
        %assign f16FWAngle = LibBlockOutputSignal(7, "", "", 0)
        %assign f16FWSin = LibBlockOutputSignal(8, "", "", 0)
        %assign f16FWCos = LibBlockOutputSignal(9, "", "", 0)
        %assign f32Acc_Out = LibBlockOutputSignal(10, "", "", 0)
        %assign f32IntegPartK_1_Out = LibBlockOutputSignal(11, "", "", 0)
        %assign f16InK_1_Out = LibBlockOutputSignal(12, "", "", 0)
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %assign showDebugOutputs = CAST("Number",Parameter[2].Value[0])
        %% 
        %if (showStates == 2)
          /* Copy inputs to Simulink states */
          (%<pIDQReqState>)->f16Arg2 = (tFrac16)(%<f16IQReqK_1>);
        
          %if (showDebugOutputs == 2)
            /* Copy inputs to DEBUG struct states */
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc = (tFrac32)(%<f32Acc>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.u16NSamples = (tU16)(%<u16NSamples>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16PropGain = (tFrac16)(%<f16PropGain>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16IntegGain = (tFrac16)(%<f16IntegGain>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16PropGainShift = (tS16)(%<s16PropGainShift>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16IntegGainShift = (tS16)(%<s16IntegGainShift>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16LowerLimit = (tFrac16)(%<f16LowerLimit>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16UpperLimit = (tFrac16)(%<f16UpperLimit>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1 = (tFrac32)(%<f32IntegPartK_1>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16InK_1 = (tFrac16)(%<f16InK_1>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pIQFbck = (tFrac16 *)(%<f16IQFbck>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pUQReq = (tFrac16 *)(%<f16UQReq>);
            f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pUQLim = (tFrac16 *)(%<f16UQLim>);
          %endif
        
          /* Copy inputs to struct states*/
          f16FWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc = (tFrac32)(%<f32Acc>);
          f16FWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.u16NSamples = (tU16)(%<u16NSamples>);
          f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16PropGain = (tFrac16)(%<f16PropGain>);
          f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16IntegGain = (tFrac16)(%<f16IntegGain>);
          f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16PropGainShift = (tS16)(%<s16PropGainShift>);
          f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.s16IntegGainShift = (tS16)(%<s16IntegGainShift>);
          f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16LowerLimit = (tFrac16)(%<f16LowerLimit>);
          f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16UpperLimit = (tFrac16)(%<f16UpperLimit>);
          f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1 = (tFrac32)(%<f32IntegPartK_1>);
          f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16InK_1 = (tFrac16)(%<f16InK_1>);
        %endif
        
        /* Copy inputs to struct states */
        f16FWStateStr_%<SYSNAME(Name)[0]>.pIQFbck = (tFrac16 *)(%<f16IQFbck>);
        f16FWStateStr_%<SYSNAME(Name)[0]>.pUQReq = (tFrac16 *)(%<f16UQReq>);
        f16FWStateStr_%<SYSNAME(Name)[0]>.pUQLim = (tFrac16 *)(%<f16UQLim>);
        
        %if (resetStatesEnable == 1)
          if ((tS16)(%<s16ResetStates>) != (tS16)0)
          {
            %<s16ResetStates> = (tS16)0;
            AMCLIB_FWSetState_F16((tFrac16)(%<f16FilterMAFWOut>), (tFrac16)(%<f16ControllerPIpAWFWOut>), &f16FWStateStr_%<SYSNAME(Name)[0]>);
            %if (showStates == 2)
              %if (showDebugOutputs == 2)
                /* Copy struct states to DEBUG struct states */
                f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc = f16FWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc;
                f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1 = f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1;
                f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16InK_1 = f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16InK_1;
              %endif
            %endif
          }
        %endif
        %if (showStates == 2)
          %if (showDebugOutputs == 2)
            AMCLIB_FWDebug_F16((tFrac16)(%<f16IDQReqAmp>), (tFrac16)(%<f16VelocityFbck>), (SWLIBS_2Syst_F16 *)(%<pIDQReqState>), &f16FWDebugStateStr_%<SYSNAME(Name)[0]>);
          %else
            AMCLIB_FW_F16((tFrac16)(%<f16IDQReqAmp>), (tFrac16)(%<f16VelocityFbck>), (SWLIBS_2Syst_F16 *)(%<pIDQReqState>), &f16FWStateStr_%<SYSNAME(Name)[0]>);
          %endif
        %else
          AMCLIB_FW_F16((tFrac16)(%<f16IDQReqAmp>), (tFrac16)(%<f16VelocityFbck>), (SWLIBS_2Syst_F16 *)(%<pIDQReqState>), &f16FWStateStr_%<SYSNAME(Name)[0]>);
        %endif
        
        /* Copy Simulink states to output */
        (%<pIDQReq>).f16Arg1 = ((SWLIBS_2Syst_F16 *)(%<pIDQReqState>))->f16Arg1;
        (%<pIDQReq>).f16Arg2 = ((SWLIBS_2Syst_F16 *)(%<pIDQReqState>))->f16Arg2;
        
        %if (showStates == 2)
          %if (showDebugOutputs == 2)
            /* Copy DEBUG struct states to outputs */
            %<u16LimitFlag> = f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.u16LimitFlag;
            %<f16IQErrSign> = f16FWDebugStateStr_%<SYSNAME(Name)[0]>.f16IQErrSign;
            %<f16IQErr> = f16FWDebugStateStr_%<SYSNAME(Name)[0]>.f16IQErr;
            %<f16FWErr> = f16FWDebugStateStr_%<SYSNAME(Name)[0]>.f16FWErr;
            %<f16UQErr> = f16FWDebugStateStr_%<SYSNAME(Name)[0]>.f16UQErr;
            %<f16FWErrFilt> = f16FWDebugStateStr_%<SYSNAME(Name)[0]>.f16FWErrFilt;
            %<f16FWAngle> = f16FWDebugStateStr_%<SYSNAME(Name)[0]>.f16FWAngle;
            %<f16FWSin> = f16FWDebugStateStr_%<SYSNAME(Name)[0]>.f16FWSin;
            %<f16FWCos> = f16FWDebugStateStr_%<SYSNAME(Name)[0]>.f16FWCos;
            %<f32Acc_Out> = f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc;
            %<f32IntegPartK_1_Out> = f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1;
            %<f16InK_1_Out> = f16FWDebugStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16InK_1;
          %else
            /* Copy struct states to outputs */
            %<u16LimitFlag> = f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.u16LimitFlag;
            %<f32Acc_Out> = f16FWStateStr_%<SYSNAME(Name)[0]>.pFilterFW.f32Acc;
            %<f32IntegPartK_1_Out> = f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f32IntegPartK_1;
            %<f16InK_1_Out> = f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.f16InK_1;
          %endif
        %else
          /* Copy struct states to outputs */
          %<u16LimitFlag> = f16FWStateStr_%<SYSNAME(Name)[0]>.pPIpAWFW.u16LimitFlag;
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign work3BUSBUS_addr = "&" + LibBlockPWork("", "", "", 3)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_FW_SF_F16_wrapper_freemem(%<y1BUSBUS_addr>, %<work1BUSBUS_addr>, %<work2BUSBUS_addr>, %<work3BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
