%% file : AMCLIB_BemfObsrvDQ_SF_FLT.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for AMCLIB_BemfObsrvDQ_SF_FLT
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 12-Sep-2023 09:21:53

%% Copyright 2019-2023 NXP
%%
%% NXP Confidential and Proprietary. This software is owned or controlled by NXP and may only be
%% used strictly in accordance with the applicable license terms.  By expressly accepting such
%% terms or by downloading, installing, activating and/or otherwise using the software, you are
%% agreeing that you have read, and that you agree to comply with and are bound by, such license
%% terms. If you do not agree to be bound by the applicable license terms, then you may not retain,
%% install, activate or otherwise use the software.

%implements AMCLIB_BemfObsrvDQ_SF_FLT "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("AMCLIB_BemfObsrvDQ_SF_FLT_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int AMCLIB_BemfObsrvDQ_SF_FLT_wrapper_allocmem(void** u1BUS, int_T u1BUSWidth, void** u2BUS, int_T u2BUSWidth, void** work1BUS, int_T work1BUSWidth);
        extern int AMCLIB_BemfObsrvDQ_SF_FLT_wrapper_freemem(void** u1BUS, void** u2BUS, void** work1BUS);

        extern void AMCLIB_BemfObsrvDQ_SF_FLT_wrapper_InitializeConditions( void* work1, void* work1BUS,  int32_T* work2, const real32_T p3, const real32_T p4, const real32_T p5, const real32_T p6, const real32_T p7, const real32_T p8, const real32_T p9, const real32_T p10, const real32_T p11, const real32_T p12, const real32_T p13, const real32_T p14, const int32_T p2, const int32_T p15, const real_T p16, const real_T p17, const real_T p18, const real_T p19, const real_T p20, const real_T p21, const real_T p22, const int32_T p23);
        extern void AMCLIB_BemfObsrvDQ_SF_FLT_wrapper_Output( real32_T* y1, const void* u1, void* u1BUS, const void* u2, void* u2BUS, const real32_T u3, const real32_T u4,  void* work1, void* work1BUS,  int32_T* work2, const real32_T u5, const real32_T u6, const real32_T u7, const real32_T u8, const real32_T u9, const real32_T u10, const real32_T u11, const real32_T u12, const real32_T u13, const real32_T u14, const real32_T u15, const real32_T u16, const real32_T u17, const real32_T u18, const real32_T u19, const real32_T u20, const real32_T u21, const real32_T u22, const real32_T u23, const real32_T u24,  real32_T* y2,  real32_T* y3,  real32_T* y4,  real32_T* y5,  real32_T* y6,  real32_T* y7,  real32_T* y8,  real32_T* y9,  real32_T* y10,  real32_T* y11, const int32_T p1, const int32_T p2);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("AMCLIB_BemfObsrvDQ_SF_FLT_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "amclib.h"
        #include "gflib.h"
        #include "gmclib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GFLIB_ControllerPIrAW.h"
        #include "AMCLIB_BemfObsrvDQ.h"

        int AMCLIB_BemfObsrvDQ_SF_FLT_wrapper_allocmem(void** u1BUS, int_T u1BUSWidth, void** u2BUS, int_T u2BUSWidth, void** work1BUS, int_T work1BUSWidth) {
            *u1BUS = calloc(sizeof(SWLIBS_2Syst_FLT), u1BUSWidth);
            if (*u1BUS==NULL) return -1;
            *u2BUS = calloc(sizeof(SWLIBS_2Syst_FLT), u2BUSWidth);
            if (*u2BUS==NULL) return -1;
            *work1BUS = calloc(sizeof(AMCLIB_BEMF_OBSRV_DQ_T_FLT), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            return 0;
        }
        
        int AMCLIB_BemfObsrvDQ_SF_FLT_wrapper_freemem(void** u1BUS, void** u2BUS, void** work1BUS) {
            if (*u1BUS!=NULL) free(*u1BUS);
            *u1BUS = NULL;
            if (*u2BUS!=NULL) free(*u2BUS);
            *u2BUS = NULL;
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            return 0;
        }

        void AMCLIB_BemfObsrvDQ_SF_FLT_wrapper_InitializeConditions( void* work1, void* work1BUS,  int32_T* work2, const real32_T p3, const real32_T p4, const real32_T p5, const real32_T p6, const real32_T p7, const real32_T p8, const real32_T p9, const real32_T p10, const real32_T p11, const real32_T p12, const real32_T p13, const real32_T p14, const int32_T p2, const int32_T p15, const real_T p16, const real_T p17, const real_T p18, const real_T p19, const real_T p20, const real_T p21, const real_T p22, const int32_T p23) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(AMCLIB_BEMF_OBSRV_DQ_T_FLT *)work1BUS)", "(char *)work1", 0)>

            if ((tS32)1 == (tS32)(p2))
            {
              *((tS32 *)work2) = (tS32)1;
            }
            ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamD.fltCC1sc = (tFloat)(p7);
            ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamD.fltCC2sc = (tFloat)(p8);
            ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamD.fltUpperLimit = (tFloat)(p9);
            ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamD.fltLowerLimit = (tFloat)(p10);
            ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamQ.fltCC1sc = (tFloat)(p11);
            ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamQ.fltCC2sc = (tFloat)(p12);
            ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamQ.fltUpperLimit = (tFloat)(p13);
            ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamQ.fltLowerLimit = (tFloat)(p14);
            ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->fltIGain = (tFloat)(p3);
            ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->fltUGain = (tFloat)(p4);
            ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->fltWIGain = (tFloat)(p5);
            ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->fltEGain = (tFloat)(p6);
            AMCLIB_BemfObsrvDQInit_FLT((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS));

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(AMCLIB_BEMF_OBSRV_DQ_T_FLT *)work1BUS)", 0)>
        }

        void AMCLIB_BemfObsrvDQ_SF_FLT_wrapper_Output( real32_T* y1, const void* u1, void* u1BUS, const void* u2, void* u2BUS, const real32_T u3, const real32_T u4,  void* work1, void* work1BUS,  int32_T* work2, const real32_T u5, const real32_T u6, const real32_T u7, const real32_T u8, const real32_T u9, const real32_T u10, const real32_T u11, const real32_T u12, const real32_T u13, const real32_T u14, const real32_T u15, const real32_T u16, const real32_T u17, const real32_T u18, const real32_T u19, const real32_T u20, const real32_T u21, const real32_T u22, const real32_T u23, const real32_T u24,  real32_T* y2,  real32_T* y3,  real32_T* y4,  real32_T* y5,  real32_T* y6,  real32_T* y7,  real32_T* y8,  real32_T* y9,  real32_T* y10,  real32_T* y11, const int32_T p1, const int32_T p2) {

            /* Assign the Simulink structure u1 to user structure u1BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(0)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_FLT *)u1BUS)", "(char *)u1", 0)>


            /* Assign the Simulink structure u2 to user structure u2BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_FLT *)u2BUS)", "(char *)u2", 0)>


            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(AMCLIB_BEMF_OBSRV_DQ_T_FLT *)work1BUS)", "(char *)work1", 0)>

            
            if((tS32)2 == (tS32)(p1))
            {
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pIObsrv.fltArg1 = (tFloat)(u23);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pIObsrv.fltArg2 = (tFloat)(u24);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamD.fltCC1sc = (tFloat)(u9);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamD.fltCC2sc = (tFloat)(u10);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamD.fltAcc = (tFloat)(u17);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamD.fltInErrK1 = (tFloat)(u18);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamD.fltUpperLimit = (tFloat)(u11);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamD.fltLowerLimit = (tFloat)(u12);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamQ.fltCC1sc = (tFloat)(u13);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamQ.fltCC2sc = (tFloat)(u14);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamQ.fltAcc = (tFloat)(u19);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamQ.fltInErrK1 = (tFloat)(u20);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamQ.fltUpperLimit = (tFloat)(u15);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamQ.fltLowerLimit = (tFloat)(u16);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pIObsrvIn_1.fltArg1 = (tFloat)(u21);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pIObsrvIn_1.fltArg2 = (tFloat)(u22);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->fltIGain = (tFloat)(u5);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->fltUGain = (tFloat)(u6);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->fltWIGain = (tFloat)(u7);
              ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->fltEGain = (tFloat)(u8);
            }    
            if ((tS32)1 == (tS32)(p2))
            {
              if (*(tS32 *)(work2) != (tS32)0)
              {
                *((tS32 *)work2) = (tS32)0;
                AMCLIB_BemfObsrvDQSetState_FLT((SWLIBS_2Syst_FLT *const)(u1BUS), (SWLIBS_2Syst_FLT *const)(u2BUS), (tFloat)(u3), (tFloat)(u4), (AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS));
              }
            }
            *y1 = AMCLIB_BemfObsrvDQ_FLT((SWLIBS_2Syst_FLT *const)(u1BUS), (SWLIBS_2Syst_FLT *const)(u2BUS), (tFloat)(u3), (tFloat)(u4), (AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS));
            if((tS32)2 == (tS32)(p1))
            {
              *((tFloat *)y2) = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pEObsrv.fltArg1;
              *((tFloat *)y3) = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pEObsrv.fltArg2;
              *((tFloat *)y4) = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamD.fltAcc;
              *((tFloat *)y5) = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamD.fltInErrK1;
              *((tFloat *)y6) = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamQ.fltAcc;
              *((tFloat *)y7) = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pParamQ.fltInErrK1;
              *((tFloat *)y8) = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pIObsrvIn_1.fltArg1;
              *((tFloat *)y9) = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pIObsrvIn_1.fltArg2;
              *((tFloat *)y10) = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pIObsrv.fltArg1;
              *((tFloat *)y11) = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(work1BUS))->pIObsrv.fltArg2;
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(AMCLIB_BEMF_OBSRV_DQ_T_FLT *)work1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("amclib.h")>
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("gmclib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIrAW.h")>
        %<LibAddToCommonIncludes("AMCLIB_BemfObsrvDQ.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u2BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_BemfObsrvDQ_SF_FLT_wrapper_allocmem(%<u1BUS_addr>, %<LibBlockInputSignalWidth(0)>, %<u2BUS_addr>, %<LibBlockInputSignalWidth(1)>, %<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign s32ResetStates = LibBlockDWorkAddr(work2, "", "", 0)
        %assign fltIGain = CAST("Real",Parameter[2].Value[0])
        %assign fltUGain = CAST("Real",Parameter[3].Value[0])
        %assign fltWIGain = CAST("Real",Parameter[4].Value[0])
        %assign fltEGain = CAST("Real",Parameter[5].Value[0])
        %assign fltCC1sc_D = CAST("Real",Parameter[6].Value[0])
        %assign fltCC2sc_D = CAST("Real",Parameter[7].Value[0])
        %assign fltUpperLimit_D = CAST("Real",Parameter[8].Value[0])
        %assign fltLowerLimit_D = CAST("Real",Parameter[9].Value[0])
        %assign fltCC1sc_Q = CAST("Real",Parameter[10].Value[0])
        %assign fltCC2sc_Q = CAST("Real",Parameter[11].Value[0])
        %assign fltUpperLimit_Q = CAST("Real",Parameter[12].Value[0])
        %assign fltLowerLimit_Q = CAST("Real",Parameter[13].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %assign intmethod = CAST("Number",Parameter[14].Value[0])
        %assign if0 = CAST("Real",Parameter[15].Value[0])
        %assign iksi = CAST("Real",Parameter[16].Value[0])
        %assign Ld = CAST("Real",Parameter[17].Value[0])
        %assign Lq = CAST("Real",Parameter[18].Value[0])
        %assign Rs = CAST("Real",Parameter[19].Value[0])
        %assign mechspeed = CAST("Real",Parameter[20].Value[0])
        %assign polepairs = CAST("Real",Parameter[21].Value[0])
        %assign autoCalcEn = CAST("Number",Parameter[22].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %assign SampleTime = LibBlockSampleTime(block)
        %if(autoCalcEn == 1)
          %assign w0=6.283185307179586*if0
          %assign pgain=2.0*iksi*w0*Ld-Rs
          %assign igain=w0*w0*Ld
          %if (intmethod == 1)
            %assign cc1=pgain
            %assign cc2=-pgain+igain*SampleTime
          %else
            %if (intmethod == 2)
              %assign cc1=pgain+igain*SampleTime
              %assign cc2=-pgain
            %else
              %assign cc1=pgain+igain*SampleTime*0.5
              %assign cc2=-pgain+igain*SampleTime*0.5
            %endif
          %endif
          %assign fltCC1sc_D=cc1
          %assign fltCC2sc_D=cc2
          %assign fltCC1sc_Q=fltCC1sc_D
          %assign fltCC2sc_Q=fltCC2sc_D
          %assign fltLowerLimit_D=-1000000.0
          %assign fltUpperLimit_D=1000000.0
          %assign fltLowerLimit_Q=fltLowerLimit_D
          %assign fltUpperLimit_Q=fltUpperLimit_D
          %assign fltIGain=(2.0*Ld-SampleTime*Rs)/(2.0*Ld+SampleTime*Rs)
          %assign fltUGain=SampleTime/(2.0*Ld+SampleTime*Rs)
          %assign fltWIGain=SampleTime*Lq/(2.0*Ld+SampleTime*Rs)
          %assign fltEGain=SampleTime/(2.0*Ld+SampleTime*Rs)
        %endif
        AMCLIB_BemfObsrvDQ_SF_FLT_wrapper_InitializeConditions(%<pCtrl>, %<work1BUS_ptr>, %<s32ResetStates>, %<fltIGain>, %<fltUGain>, %<fltWIGain>, %<fltEGain>, %<fltCC1sc_D>, %<fltCC2sc_D>, %<fltUpperLimit_D>, %<fltLowerLimit_D>, %<fltCC1sc_Q>, %<fltCC2sc_Q>, %<fltUpperLimit_Q>, %<fltLowerLimit_Q>, %<resetStatesEnable>, %<intmethod>, %<if0>, %<iksi>, %<Ld>, %<Lq>, %<Rs>, %<mechspeed>, %<polepairs>, %<autoCalcEn>);
    %else
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work2, "", "", 0)
        %assign fltIGain = CAST("Real",Parameter[2].Value[0])
        %assign fltUGain = CAST("Real",Parameter[3].Value[0])
        %assign fltWIGain = CAST("Real",Parameter[4].Value[0])
        %assign fltEGain = CAST("Real",Parameter[5].Value[0])
        %assign fltCC1sc_D = CAST("Real",Parameter[6].Value[0])
        %assign fltCC2sc_D = CAST("Real",Parameter[7].Value[0])
        %assign fltUpperLimit_D = CAST("Real",Parameter[8].Value[0])
        %assign fltLowerLimit_D = CAST("Real",Parameter[9].Value[0])
        %assign fltCC1sc_Q = CAST("Real",Parameter[10].Value[0])
        %assign fltCC2sc_Q = CAST("Real",Parameter[11].Value[0])
        %assign fltUpperLimit_Q = CAST("Real",Parameter[12].Value[0])
        %assign fltLowerLimit_Q = CAST("Real",Parameter[13].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %assign intmethod = CAST("Number",Parameter[14].Value[0])
        %assign if0 = CAST("Real",Parameter[15].Value[0])
        %assign iksi = CAST("Real",Parameter[16].Value[0])
        %assign Ld = CAST("Real",Parameter[17].Value[0])
        %assign Lq = CAST("Real",Parameter[18].Value[0])
        %assign Rs = CAST("Real",Parameter[19].Value[0])
        %assign mechspeed = CAST("Real",Parameter[20].Value[0])
        %assign polepairs = CAST("Real",Parameter[21].Value[0])
        %assign autoCalcEn = CAST("Number",Parameter[22].Value[0])
        %% 
        %assign SampleTime = LibBlockSampleTime(block)
        %if(autoCalcEn == 1)
          %assign w0=6.283185307179586*if0
          %assign pgain=2.0*iksi*w0*Ld-Rs
          %assign igain=w0*w0*Ld
          %if (intmethod == 1)
            %assign cc1=pgain
            %assign cc2=-pgain+igain*SampleTime
          %else
            %if (intmethod == 2)
              %assign cc1=pgain+igain*SampleTime
              %assign cc2=-pgain
            %else
              %assign cc1=pgain+igain*SampleTime*0.5
              %assign cc2=-pgain+igain*SampleTime*0.5
            %endif
          %endif
          %assign fltCC1sc_D=cc1
          %assign fltCC2sc_D=cc2
          %assign fltCC1sc_Q=fltCC1sc_D
          %assign fltCC2sc_Q=fltCC2sc_D
          %assign fltLowerLimit_D=-1000000.0
          %assign fltUpperLimit_D=1000000.0
          %assign fltLowerLimit_Q=fltLowerLimit_D
          %assign fltUpperLimit_Q=fltUpperLimit_D
          %assign fltIGain=(2.0*Ld-SampleTime*Rs)/(2.0*Ld+SampleTime*Rs)
          %assign fltUGain=SampleTime/(2.0*Ld+SampleTime*Rs)
          %assign fltWIGain=SampleTime*Lq/(2.0*Ld+SampleTime*Rs)
          %assign fltEGain=SampleTime/(2.0*Ld+SampleTime*Rs)
        %endif
        %if (resetStatesEnable == 1)
          %<s32ResetStates> = (tS32)1;
        %endif
        (%<pCtrl>)->pParamD.fltCC1sc = (tFloat)(%<fltCC1sc_D>);
        (%<pCtrl>)->pParamD.fltCC2sc = (tFloat)(%<fltCC2sc_D>);
        (%<pCtrl>)->pParamD.fltUpperLimit = (tFloat)(%<fltUpperLimit_D>);
        (%<pCtrl>)->pParamD.fltLowerLimit = (tFloat)(%<fltLowerLimit_D>);
        (%<pCtrl>)->pParamQ.fltCC1sc = (tFloat)(%<fltCC1sc_Q>);
        (%<pCtrl>)->pParamQ.fltCC2sc = (tFloat)(%<fltCC2sc_Q>);
        (%<pCtrl>)->pParamQ.fltUpperLimit = (tFloat)(%<fltUpperLimit_Q>);
        (%<pCtrl>)->pParamQ.fltLowerLimit = (tFloat)(%<fltLowerLimit_Q>);
        (%<pCtrl>)->fltIGain = (tFloat)(%<fltIGain>);
        (%<pCtrl>)->fltUGain = (tFloat)(%<fltUGain>);
        (%<pCtrl>)->fltWIGain = (tFloat)(%<fltWIGain>);
        (%<pCtrl>)->fltEGain = (tFloat)(%<fltEGain>);
        AMCLIB_BemfObsrvDQInit_FLT((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(%<pCtrl>));
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign fltPhaseErr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign pIAB = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign pUAB = LibBlockInputSignalAddr(1, "", "", 0)
        %assign u2BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign fltVelocity = LibBlockInputSignal(2, "", "", 0)
        %assign fltPhase = LibBlockInputSignal(3, "", "", 0)
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign s32ResetStates = LibBlockDWorkAddr(work2, "", "", 0)
        %assign fltIGain = LibBlockInputSignal(4, "", "", 0)
        %assign fltUGain = LibBlockInputSignal(5, "", "", 0)
        %assign fltWIGain = LibBlockInputSignal(6, "", "", 0)
        %assign fltEGain = LibBlockInputSignal(7, "", "", 0)
        %assign fltCC1sc_D = LibBlockInputSignal(8, "", "", 0)
        %assign fltCC2sc_D = LibBlockInputSignal(9, "", "", 0)
        %assign fltUpperLimit_D = LibBlockInputSignal(10, "", "", 0)
        %assign fltLowerLimit_D = LibBlockInputSignal(11, "", "", 0)
        %assign fltCC1sc_Q = LibBlockInputSignal(12, "", "", 0)
        %assign fltCC2sc_Q = LibBlockInputSignal(13, "", "", 0)
        %assign fltUpperLimit_Q = LibBlockInputSignal(14, "", "", 0)
        %assign fltLowerLimit_Q = LibBlockInputSignal(15, "", "", 0)
        %assign fltAcc_D = LibBlockInputSignal(16, "", "", 0)
        %assign fltInErrK1_D = LibBlockInputSignal(17, "", "", 0)
        %assign fltAcc_Q = LibBlockInputSignal(18, "", "", 0)
        %assign fltInErrK1_Q = LibBlockInputSignal(19, "", "", 0)
        %assign fltIObsrvIn_1_D = LibBlockInputSignal(20, "", "", 0)
        %assign fltIObsrvIn_1_Q = LibBlockInputSignal(21, "", "", 0)
        %assign fltIObsrv_D = LibBlockInputSignal(22, "", "", 0)
        %assign fltIObsrv_Q = LibBlockInputSignal(23, "", "", 0)
        %assign fltEObsrv_D_Out = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign fltEObsrv_Q_Out = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign fltAcc_D_Out = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign fltInErrK1_D_Out = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign fltAcc_Q_Out = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign fltInErrK1_Q_Out = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign fltIObsrvIn_1_D_Out = LibBlockOutputSignalAddr(7, "", "", 0)
        %assign fltIObsrvIn_1_Q_Out = LibBlockOutputSignalAddr(8, "", "", 0)
        %assign fltIObsrv_D_Out = LibBlockOutputSignalAddr(9, "", "", 0)
        %assign fltIObsrv_Q_Out = LibBlockOutputSignalAddr(10, "", "", 0)
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %if (showStates == 2)
          %<LibReportFatalError("BAM blocks with shown debugging inputs/outputs are not supported in rapid accelerator mode.")>
        %endif
        AMCLIB_BemfObsrvDQ_SF_FLT_wrapper_Output(%<fltPhaseErr>, %<pIAB>, %<u1BUS_ptr>, %<pUAB>, %<u2BUS_ptr>, %<fltVelocity>, %<fltPhase>, %<pCtrl>, %<work1BUS_ptr>, %<s32ResetStates>, %<fltIGain>, %<fltUGain>, %<fltWIGain>, %<fltEGain>, %<fltCC1sc_D>, %<fltCC2sc_D>, %<fltUpperLimit_D>, %<fltLowerLimit_D>, %<fltCC1sc_Q>, %<fltCC2sc_Q>, %<fltUpperLimit_Q>, %<fltLowerLimit_Q>, %<fltAcc_D>, %<fltInErrK1_D>, %<fltAcc_Q>, %<fltInErrK1_Q>, %<fltIObsrvIn_1_D>, %<fltIObsrvIn_1_Q>, %<fltIObsrv_D>, %<fltIObsrv_Q>, %<fltEObsrv_D_Out>, %<fltEObsrv_Q_Out>, %<fltAcc_D_Out>, %<fltInErrK1_D_Out>, %<fltAcc_Q_Out>, %<fltInErrK1_Q_Out>, %<fltIObsrvIn_1_D_Out>, %<fltIObsrvIn_1_Q_Out>, %<fltIObsrv_D_Out>, %<fltIObsrv_Q_Out>, %<showStates>, %<resetStatesEnable>);
    %else
        %assign fltPhaseErr = LibBlockOutputSignal(0, "", "", 0)
        %assign pIAB = LibBlockInputSignalAddr(0, "", "", 0)
        %assign pUAB = LibBlockInputSignalAddr(1, "", "", 0)
        %assign fltVelocity = LibBlockInputSignal(2, "", "", 0)
        %assign fltPhase = LibBlockInputSignal(3, "", "", 0)
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work2, "", "", 0)
        %assign fltIGain = LibBlockInputSignal(4, "", "", 0)
        %assign fltUGain = LibBlockInputSignal(5, "", "", 0)
        %assign fltWIGain = LibBlockInputSignal(6, "", "", 0)
        %assign fltEGain = LibBlockInputSignal(7, "", "", 0)
        %assign fltCC1sc_D = LibBlockInputSignal(8, "", "", 0)
        %assign fltCC2sc_D = LibBlockInputSignal(9, "", "", 0)
        %assign fltUpperLimit_D = LibBlockInputSignal(10, "", "", 0)
        %assign fltLowerLimit_D = LibBlockInputSignal(11, "", "", 0)
        %assign fltCC1sc_Q = LibBlockInputSignal(12, "", "", 0)
        %assign fltCC2sc_Q = LibBlockInputSignal(13, "", "", 0)
        %assign fltUpperLimit_Q = LibBlockInputSignal(14, "", "", 0)
        %assign fltLowerLimit_Q = LibBlockInputSignal(15, "", "", 0)
        %assign fltAcc_D = LibBlockInputSignal(16, "", "", 0)
        %assign fltInErrK1_D = LibBlockInputSignal(17, "", "", 0)
        %assign fltAcc_Q = LibBlockInputSignal(18, "", "", 0)
        %assign fltInErrK1_Q = LibBlockInputSignal(19, "", "", 0)
        %assign fltIObsrvIn_1_D = LibBlockInputSignal(20, "", "", 0)
        %assign fltIObsrvIn_1_Q = LibBlockInputSignal(21, "", "", 0)
        %assign fltIObsrv_D = LibBlockInputSignal(22, "", "", 0)
        %assign fltIObsrv_Q = LibBlockInputSignal(23, "", "", 0)
        %assign fltEObsrv_D_Out = LibBlockOutputSignal(1, "", "", 0)
        %assign fltEObsrv_Q_Out = LibBlockOutputSignal(2, "", "", 0)
        %assign fltAcc_D_Out = LibBlockOutputSignal(3, "", "", 0)
        %assign fltInErrK1_D_Out = LibBlockOutputSignal(4, "", "", 0)
        %assign fltAcc_Q_Out = LibBlockOutputSignal(5, "", "", 0)
        %assign fltInErrK1_Q_Out = LibBlockOutputSignal(6, "", "", 0)
        %assign fltIObsrvIn_1_D_Out = LibBlockOutputSignal(7, "", "", 0)
        %assign fltIObsrvIn_1_Q_Out = LibBlockOutputSignal(8, "", "", 0)
        %assign fltIObsrv_D_Out = LibBlockOutputSignal(9, "", "", 0)
        %assign fltIObsrv_Q_Out = LibBlockOutputSignal(10, "", "", 0)
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %% 
        
        %if (showStates == 2)
          (%<pCtrl>)->pIObsrv.fltArg1 = (tFloat)(%<fltIObsrv_D>);
          (%<pCtrl>)->pIObsrv.fltArg2 = (tFloat)(%<fltIObsrv_Q>);
          (%<pCtrl>)->pParamD.fltCC1sc = (tFloat)(%<fltCC1sc_D>);
          (%<pCtrl>)->pParamD.fltCC2sc = (tFloat)(%<fltCC2sc_D>);
          (%<pCtrl>)->pParamD.fltAcc = (tFloat)(%<fltAcc_D>);
          (%<pCtrl>)->pParamD.fltInErrK1 = (tFloat)(%<fltInErrK1_D>);
          (%<pCtrl>)->pParamD.fltUpperLimit = (tFloat)(%<fltUpperLimit_D>);
          (%<pCtrl>)->pParamD.fltLowerLimit = (tFloat)(%<fltLowerLimit_D>);
          (%<pCtrl>)->pParamQ.fltCC1sc = (tFloat)(%<fltCC1sc_Q>);
          (%<pCtrl>)->pParamQ.fltCC2sc = (tFloat)(%<fltCC2sc_Q>);
          (%<pCtrl>)->pParamQ.fltAcc = (tFloat)(%<fltAcc_Q>);
          (%<pCtrl>)->pParamQ.fltInErrK1 = (tFloat)(%<fltInErrK1_Q>);
          (%<pCtrl>)->pParamQ.fltUpperLimit = (tFloat)(%<fltUpperLimit_Q>);
          (%<pCtrl>)->pParamQ.fltLowerLimit = (tFloat)(%<fltLowerLimit_Q>);
          (%<pCtrl>)->pIObsrvIn_1.fltArg1 = (tFloat)(%<fltIObsrvIn_1_D>);
          (%<pCtrl>)->pIObsrvIn_1.fltArg2 = (tFloat)(%<fltIObsrvIn_1_Q>);
          (%<pCtrl>)->fltIGain = (tFloat)(%<fltIGain>);
          (%<pCtrl>)->fltUGain = (tFloat)(%<fltUGain>);
          (%<pCtrl>)->fltWIGain = (tFloat)(%<fltWIGain>);
          (%<pCtrl>)->fltEGain = (tFloat)(%<fltEGain>);
        %endif    
        %if (resetStatesEnable == 1)
          if ((tS32)(%<s32ResetStates>) != (tS32)0)
          {
            %<s32ResetStates> = (tS32)0;
            AMCLIB_BemfObsrvDQSetState_FLT((SWLIBS_2Syst_FLT *const)(%<pIAB>), (SWLIBS_2Syst_FLT *const)(%<pUAB>), (tFloat)(%<fltVelocity>), (tFloat)(%<fltPhase>), (AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(%<pCtrl>));
          }
        %endif
        %<fltPhaseErr> = AMCLIB_BemfObsrvDQ_FLT((SWLIBS_2Syst_FLT *const)(%<pIAB>), (SWLIBS_2Syst_FLT *const)(%<pUAB>), (tFloat)(%<fltVelocity>), (tFloat)(%<fltPhase>), (AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(%<pCtrl>));
        %if (showStates == 2)
          %<fltEObsrv_D_Out> = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(%<pCtrl>))->pEObsrv.fltArg1;
          %<fltEObsrv_Q_Out> = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(%<pCtrl>))->pEObsrv.fltArg2;
          %<fltAcc_D_Out> = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(%<pCtrl>))->pParamD.fltAcc;
          %<fltInErrK1_D_Out> = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(%<pCtrl>))->pParamD.fltInErrK1;
          %<fltAcc_Q_Out> = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(%<pCtrl>))->pParamQ.fltAcc;
          %<fltInErrK1_Q_Out> = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(%<pCtrl>))->pParamQ.fltInErrK1;
          %<fltIObsrvIn_1_D_Out> = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(%<pCtrl>))->pIObsrvIn_1.fltArg1;
          %<fltIObsrvIn_1_Q_Out> = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(%<pCtrl>))->pIObsrvIn_1.fltArg2;
          %<fltIObsrv_D_Out> = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(%<pCtrl>))->pIObsrv.fltArg1;
          %<fltIObsrv_Q_Out> = ((AMCLIB_BEMF_OBSRV_DQ_T_FLT *const)(%<pCtrl>))->pIObsrv.fltArg2;
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_BemfObsrvDQ_SF_FLT_wrapper_freemem(%<u1BUSBUS_addr>, %<u2BUSBUS_addr>, %<work1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
