%% file : AMCLIB_EstimBJ_SF_FLT.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for AMCLIB_EstimBJ_SF_FLT
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 12-Sep-2023 09:22:41

%% Copyright 2021-2023 NXP
%%
%% NXP Confidential and Proprietary. This software is owned or controlled by NXP and may only be
%% used strictly in accordance with the applicable license terms.  By expressly accepting such
%% terms or by downloading, installing, activating and/or otherwise using the software, you are
%% agreeing that you have read, and that you agree to comply with and are bound by, such license
%% terms. If you do not agree to be bound by the applicable license terms, then you may not retain,
%% install, activate or otherwise use the software.

%implements AMCLIB_EstimBJ_SF_FLT "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("AMCLIB_EstimBJ_SF_FLT_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int AMCLIB_EstimBJ_SF_FLT_wrapper_allocmem(void** y2BUS, int_T y2BUSWidth, void** u1BUS, int_T u1BUSWidth, void** work1BUS, int_T work1BUSWidth);
        extern int AMCLIB_EstimBJ_SF_FLT_wrapper_freemem(void** y2BUS, void** u1BUS, void** work1BUS);

        extern void AMCLIB_EstimBJ_SF_FLT_wrapper_InitializeConditions(const int32_T p1, const uint32_T p2, const real32_T p3, const real32_T p4, const real32_T p5, const real32_T p6, const real32_T p7, const real32_T p8, const real32_T p9, const real32_T p10, const real32_T p11, const real32_T p12, const real32_T p13, const real32_T p14, const real32_T p15, const real32_T p16, const real32_T p17, const real32_T p18,  void* work1, void* work1BUS);
        extern void AMCLIB_EstimBJ_SF_FLT_wrapper_Output( void* y1,  void* y2, void* y2BUS,  real32_T* y3,  real32_T* y4,  real32_T* y5,  real32_T* y6, const void* u1, void* u1BUS, const real32_T u2,  void* work1, void* work1BUS);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("AMCLIB_EstimBJ_SF_FLT_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "amclib.h"
        #include "gdflib.h"
        #include "gflib.h"
        #include "gmclib.h"

        #include "AMCLIB_EstimBJ.h"
        #include "SWLIBS_Typedefs.h"
        #include "GFLIB_Ramp.h"
        #include "GFLIB_IntegratorTR.h"
        #include "GDFLIB_FilterMA.h"
        #include "GFLIB_ControllerPIpAW.h"
        #include "GFLIB_ControllerPIrAW.h"
        #include "AMCLIB_FluxEstimAB.h"
        #include "AMCLIB_TrackObsrv.h"

        int AMCLIB_EstimBJ_SF_FLT_wrapper_allocmem(void** y2BUS, int_T y2BUSWidth, void** u1BUS, int_T u1BUSWidth, void** work1BUS, int_T work1BUSWidth) {
            *y2BUS = calloc(sizeof(SWLIBS_2Syst_FLT), y2BUSWidth);
            if (*y2BUS==NULL) return -1;
            *u1BUS = calloc(sizeof(SWLIBS_2Syst_FLT), u1BUSWidth);
            if (*u1BUS==NULL) return -1;
            *work1BUS = calloc(sizeof(AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            return 0;
        }
        
        int AMCLIB_EstimBJ_SF_FLT_wrapper_freemem(void** y2BUS, void** u1BUS, void** work1BUS) {
            if (*y2BUS!=NULL) free(*y2BUS);
            *y2BUS = NULL;
            if (*u1BUS!=NULL) free(*u1BUS);
            *u1BUS = NULL;
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            return 0;
        }

        void AMCLIB_EstimBJ_SF_FLT_wrapper_InitializeConditions(const int32_T p1, const uint32_T p2, const real32_T p3, const real32_T p4, const real32_T p5, const real32_T p6, const real32_T p7, const real32_T p8, const real32_T p9, const real32_T p10, const real32_T p11, const real32_T p12, const real32_T p13, const real32_T p14, const real32_T p15, const real32_T p16, const real32_T p17, const real32_T p18,  void* work1, void* work1BUS) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *)work1BUS)", "(char *)work1", 0)>

            AMCLIB_ESTIMBJ_T_FLT fltEstimBJStateStr;
            AMCLIB_ESTIMBJ_INIT_T_FLT pParam;
            
            pParam.fltIN            = (tFloat)(p3);	
            pParam.fltWN            = (tFloat)(p4);		
            pParam.fltPP 		        = (tFloat)(p5);		  
            pParam.fltLd            = (tFloat)(p6);
            pParam.fltLq            = (tFloat)(p7);
            pParam.fltRs            = (tFloat)(p8);
            pParam.fltDtVDrop       = (tFloat)(p9);
            pParam.u32SamplingFreq  = (tU32)(p2);
            if(1 == (tS32)(p1))
            {
              pParam.fltAlignTime     = 0.0f;
              pParam.fltIReqOl        = 0.0f;
              pParam.fltWStepOl       = 0.0f;
              pParam.fltDCWReq1       = 0.0f;
              pParam.fltDCWReq2       = 0.0f;
              pParam.fltDcPiPropGain  = 0.0f;
              pParam.fltDcPiIntegGain = 0.0f;
              pParam.fltAcPiPropGain  = 0.0f;
              pParam.fltAcPiIntegGain = 0.0f;
            }
            if(2 == (tS32)(p1))
            {
              pParam.fltAlignTime     = (tFloat)(p10);
              pParam.fltIReqOl        = (tFloat)(p11);
              pParam.fltWStepOl       = (tFloat)(p12);
              pParam.fltDCWReq1       = (tFloat)(p13);
              pParam.fltDCWReq2       = (tFloat)(p14);
              pParam.fltDcPiPropGain  = (tFloat)(p15);
              pParam.fltDcPiIntegGain = (tFloat)(p16);
              pParam.fltAcPiPropGain  = (tFloat)(p17);
              pParam.fltAcPiIntegGain = (tFloat)(p18);
            }
            
            AMCLIB_EstimBJInit_FLT(&fltEstimBJStateStr, pParam);
            
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pState                 = fltEstimBJStateStr.pInnerState.pState;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->bTwoPointMeas          = fltEstimBJStateStr.pInnerState.bTwoPointMeas;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32AlignTimer          = fltEstimBJStateStr.pInnerState.u32AlignTimer;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32TimerPreset         = fltEstimBJStateStr.pInnerState.u32TimerPreset;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltIReq                = fltEstimBJStateStr.pInnerState.fltIReq; 
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDCWReq1             = fltEstimBJStateStr.pInnerState.fltDCWReq1; 
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDCWReq2             = fltEstimBJStateStr.pInnerState.fltDCWReq2; 
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltACWReq              = fltEstimBJStateStr.pInnerState.fltACWReq; 
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWMax                = fltEstimBJStateStr.pInnerState.fltWMax;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPP                  = fltEstimBJStateStr.pInnerState.fltPP;
            
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWOl                 = fltEstimBJStateStr.pInnerState.fltWOl;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltThOl                = fltEstimBJStateStr.pInnerState.fltThOl;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pOLRamp                = fltEstimBJStateStr.pInnerState.pOLRamp;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pOLInteg               = fltEstimBJStateStr.pInnerState.pOLInteg;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pIqMAFilter            = fltEstimBJStateStr.pInnerState.pIqMAFilter;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pThRealTransform       = fltEstimBJStateStr.pInnerState.pThRealTransform;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pIDQRealFbck           = fltEstimBJStateStr.pInnerState.pIDQRealFbck;
            
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcReq              = fltEstimBJStateStr.pInnerState.fltWDcReq;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWAcMaxReq           = fltEstimBJStateStr.pInnerState.fltWAcMaxReq;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltIqDcReq             = fltEstimBJStateStr.pInnerState.fltIqDcReq;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltIqAcReq             = fltEstimBJStateStr.pInnerState.fltIqAcReq;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltIqAcMaxReq          = fltEstimBJStateStr.pInnerState.fltIqAcMaxReq;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWDcReqMAFilter        = fltEstimBJStateStr.pInnerState.pWDcReqMAFilter;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWAcMaxReqMAFilter     = fltEstimBJStateStr.pInnerState.pWAcMaxReqMAFilter;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWDcPI                 = fltEstimBJStateStr.pInnerState.pWDcPI;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWAcMaxPI              = fltEstimBJStateStr.pInnerState.pWAcMaxPI;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWAcMaxErr           = fltEstimBJStateStr.pInnerState.fltWAcMaxErr;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcErr2             = fltEstimBJStateStr.pInnerState.fltWDcErr2;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->f32Theta               = fltEstimBJStateStr.pInnerState.f32Theta;
            
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pUDQReq                = fltEstimBJStateStr.pInnerState.pUDQReq;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pIDQReqCLoop           = fltEstimBJStateStr.pInnerState.pIDQReqCLoop;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pIDQFbckCLoop          = fltEstimBJStateStr.pInnerState.pIDQFbckCLoop;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pCloopDPI              = fltEstimBJStateStr.pInnerState.pCurrentLoop.pPIrAWD;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pCloopQPI              = fltEstimBJStateStr.pInnerState.pCurrentLoop.pPIrAWQ;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltThEl                = fltEstimBJStateStr.pInnerState.fltThEl;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pThTransform           = fltEstimBJStateStr.pInnerState.pThTransform;
            
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDcRaw               = fltEstimBJStateStr.pInnerState.fltDcRaw;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWABAcRaw              = fltEstimBJStateStr.pInnerState.pWABAcRaw;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pPllSinCosEst          = fltEstimBJStateStr.pInnerState.pPllSinCosEst;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDcFilt              = fltEstimBJStateStr.pInnerState.fltDcFilt;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltAcFilt              = fltEstimBJStateStr.pInnerState.fltAcFilt;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWABEstErr           = fltEstimBJStateStr.pInnerState.fltWABEstErr;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pPllDMAFilter          = fltEstimBJStateStr.pInnerState.pPllDMAFilter;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pPllQMAFilter          = fltEstimBJStateStr.pInnerState.pPllQMAFilter;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pPllDcMAFilter         = fltEstimBJStateStr.pInnerState.pPllDcMAFilter;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPllPiPropGain       = fltEstimBJStateStr.pInnerState.fltPllPiPropGain;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->f32ThAcEst             = fltEstimBJStateStr.pInnerState.f32ThAcEst;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->f32ThAcInc             = fltEstimBJStateStr.pInnerState.f32ThAcInc;
            
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pFluxEstim             = fltEstimBJStateStr.pInnerState.pFluxEstim;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltLd                  = fltEstimBJStateStr.pInnerState.fltLd;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltLq                  = fltEstimBJStateStr.pInnerState.fltLq;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWEl                 = fltEstimBJStateStr.pInnerState.fltWEl;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltThErr               = fltEstimBJStateStr.pInnerState.fltThErr;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltThEstim             = fltEstimBJStateStr.pInnerState.fltThEstim;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWEstim              = fltEstimBJStateStr.pInnerState.fltWEstim;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pTrackObsrv            = fltEstimBJStateStr.pInnerState.pTrackObsrv;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPsiRaw              = fltEstimBJStateStr.pInnerState.fltPsiRaw;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPsiFilt             = fltEstimBJStateStr.pInnerState.fltPsiFilt;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDtVDrop             = fltEstimBJStateStr.pInnerState.fltDtVDrop;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pFluxMAFilter          = fltEstimBJStateStr.pInnerState.pFluxMAFilter;
            
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32SSTimeoutCnt        = fltEstimBJStateStr.pInnerState.u32SSTimeoutCnt;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32SSBandCnt           = fltEstimBJStateStr.pInnerState.u32SSBandCnt;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32SSTimeoutTime       = fltEstimBJStateStr.pInnerState.u32SSTimeoutTime;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32SSTime              = fltEstimBJStateStr.pInnerState.u32SSTime;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltSSBandHalfMax       = fltEstimBJStateStr.pInnerState.fltSSBandHalfMax;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltSSBandHalf          = fltEstimBJStateStr.pInnerState.fltSSBandHalf;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltInFilt              = fltEstimBJStateStr.pInnerState.fltInFilt;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pSSMAFilter            = fltEstimBJStateStr.pInnerState.pSSMAFilter;
            
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u16MeasNum             = fltEstimBJStateStr.pInnerState.u16MeasNum;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltMeDcArr[0]          = fltEstimBJStateStr.pInnerState.fltMeDcArr[0];
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltMeDcArr[1]          = fltEstimBJStateStr.pInnerState.fltMeDcArr[1];
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcArr[0]           = fltEstimBJStateStr.pInnerState.fltWDcArr[0];
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcArr[1]           = fltEstimBJStateStr.pInnerState.fltWDcArr[1];
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltInertiaArr[0]       = fltEstimBJStateStr.pInnerState.fltInertiaArr[0];
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltInertiaArr[1]       = fltEstimBJStateStr.pInnerState.fltInertiaArr[1];
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcErr              = fltEstimBJStateStr.pInnerState.fltWDcErr;
              
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltGainFOC             = fltEstimBJStateStr.pInnerState.fltGainFOC;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltInvGainATO          = fltEstimBJStateStr.pInnerState.fltInvGainATO;
              ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPhShiftCorr         = fltEstimBJStateStr.pInnerState.fltPhShiftCorr;
            

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *)work1BUS)", 0)>
        }

        void AMCLIB_EstimBJ_SF_FLT_wrapper_Output( void* y1,  void* y2, void* y2BUS,  real32_T* y3,  real32_T* y4,  real32_T* y5,  real32_T* y6, const void* u1, void* u1BUS, const real32_T u2,  void* work1, void* work1BUS) {

            /* Assign the Simulink structure u1 to user structure u1BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(0)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_FLT *)u1BUS)", "(char *)u1", 0)>


            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *)work1BUS)", "(char *)work1", 0)>

            AMCLIB_ESTIMBJ_T_FLT fltEstimBJStateStr;
            
            fltEstimBJStateStr.pInnerState.pState                = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pState;
            fltEstimBJStateStr.pInnerState.bTwoPointMeas         = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->bTwoPointMeas;
            fltEstimBJStateStr.pInnerState.u32AlignTimer         = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32AlignTimer;
            fltEstimBJStateStr.pInnerState.u32TimerPreset        = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32TimerPreset;
            fltEstimBJStateStr.pInnerState.fltIReq               = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltIReq;
            fltEstimBJStateStr.pInnerState.fltDCWReq1            = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDCWReq1;
            fltEstimBJStateStr.pInnerState.fltDCWReq2            = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDCWReq2;
            fltEstimBJStateStr.pInnerState.fltACWReq             = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltACWReq;
            fltEstimBJStateStr.pInnerState.fltWMax               = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWMax;
            fltEstimBJStateStr.pInnerState.fltPP                 = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPP;
            
            fltEstimBJStateStr.pInnerState.fltWOl                = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWOl;
            fltEstimBJStateStr.pInnerState.fltThOl               = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltThOl;
            fltEstimBJStateStr.pInnerState.pOLRamp               = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pOLRamp;
            fltEstimBJStateStr.pInnerState.pOLInteg              = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pOLInteg;
            fltEstimBJStateStr.pInnerState.pIqMAFilter           = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pIqMAFilter;
            fltEstimBJStateStr.pInnerState.pThRealTransform      = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pThRealTransform;
            fltEstimBJStateStr.pInnerState.pIDQRealFbck          = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pIDQRealFbck;
            
            fltEstimBJStateStr.pInnerState.fltWDcReq             = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcReq;
            fltEstimBJStateStr.pInnerState.fltWAcMaxReq          = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWAcMaxReq;
            fltEstimBJStateStr.pInnerState.fltIqDcReq            = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltIqDcReq;
            fltEstimBJStateStr.pInnerState.fltIqAcReq            = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltIqAcReq;
            fltEstimBJStateStr.pInnerState.fltIqAcMaxReq         = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltIqAcMaxReq;
            fltEstimBJStateStr.pInnerState.pWDcReqMAFilter       = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWDcReqMAFilter;
            fltEstimBJStateStr.pInnerState.pWAcMaxReqMAFilter    = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWAcMaxReqMAFilter;
            fltEstimBJStateStr.pInnerState.pWDcPI                = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWDcPI;
            fltEstimBJStateStr.pInnerState.pWAcMaxPI             = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWAcMaxPI;
            fltEstimBJStateStr.pInnerState.fltWAcMaxErr          = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWAcMaxErr;
            fltEstimBJStateStr.pInnerState.fltWDcErr2            = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcErr2;
            fltEstimBJStateStr.pInnerState.f32Theta              = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->f32Theta;
            
            fltEstimBJStateStr.pInnerState.pUDQReq               = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pUDQReq;
            fltEstimBJStateStr.pInnerState.pIDQReqCLoop          = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pIDQReqCLoop;
            fltEstimBJStateStr.pInnerState.pIDQFbckCLoop         = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pIDQFbckCLoop;
            fltEstimBJStateStr.pInnerState.pCurrentLoop.pIDQReq  = &fltEstimBJStateStr.pInnerState.pIDQReqCLoop;
            fltEstimBJStateStr.pInnerState.pCurrentLoop.pIDQFbck = &fltEstimBJStateStr.pInnerState.pIDQFbckCLoop;
            fltEstimBJStateStr.pInnerState.pCurrentLoop.pPIrAWD  = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pCloopDPI;
            	fltEstimBJStateStr.pInnerState.pCurrentLoop.pPIrAWQ  = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pCloopQPI;
            fltEstimBJStateStr.pInnerState.fltThEl               = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltThEl;
            fltEstimBJStateStr.pInnerState.pThTransform          = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pThTransform;
            
            fltEstimBJStateStr.pInnerState.fltDcRaw              = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDcRaw;
            fltEstimBJStateStr.pInnerState.pWABAcRaw             = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWABAcRaw;
            fltEstimBJStateStr.pInnerState.pPllSinCosEst         = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pPllSinCosEst;
            fltEstimBJStateStr.pInnerState.fltDcFilt             = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDcFilt;
            fltEstimBJStateStr.pInnerState.fltAcFilt             = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltAcFilt;
            fltEstimBJStateStr.pInnerState.fltWABEstErr          = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWABEstErr;
            fltEstimBJStateStr.pInnerState.pPllDMAFilter         = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pPllDMAFilter;
            fltEstimBJStateStr.pInnerState.pPllQMAFilter         = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pPllQMAFilter;
            fltEstimBJStateStr.pInnerState.pPllDcMAFilter        = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pPllDcMAFilter;
            fltEstimBJStateStr.pInnerState.fltPllPiPropGain      = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPllPiPropGain;
            fltEstimBJStateStr.pInnerState.f32ThAcEst            = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->f32ThAcEst;
            fltEstimBJStateStr.pInnerState.f32ThAcInc            = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->f32ThAcInc;
            
            fltEstimBJStateStr.pInnerState.pFluxEstim            = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pFluxEstim;
            fltEstimBJStateStr.pInnerState.fltLd                 = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltLd;
            fltEstimBJStateStr.pInnerState.fltLq                 = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltLq;
            fltEstimBJStateStr.pInnerState.fltWEl                = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWEl;
            fltEstimBJStateStr.pInnerState.fltThErr              = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltThErr;
            fltEstimBJStateStr.pInnerState.fltThEstim            = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltThEstim;
            fltEstimBJStateStr.pInnerState.fltWEstim             = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWEstim;
            fltEstimBJStateStr.pInnerState.pTrackObsrv           = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pTrackObsrv;
            fltEstimBJStateStr.pInnerState.fltPsiRaw             = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPsiRaw;
            fltEstimBJStateStr.pInnerState.fltPsiFilt            = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPsiFilt;
            fltEstimBJStateStr.pInnerState.fltDtVDrop            = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDtVDrop;
            fltEstimBJStateStr.pInnerState.pFluxMAFilter         = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pFluxMAFilter;
            
            fltEstimBJStateStr.pInnerState.u32SSTimeoutCnt       = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32SSTimeoutCnt;
            fltEstimBJStateStr.pInnerState.u32SSBandCnt          = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32SSBandCnt;
            fltEstimBJStateStr.pInnerState.u32SSTimeoutTime      = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32SSTimeoutTime;
            fltEstimBJStateStr.pInnerState.u32SSTime             = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32SSTime;
            fltEstimBJStateStr.pInnerState.fltSSBandHalfMax      = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltSSBandHalfMax;
            fltEstimBJStateStr.pInnerState.fltSSBandHalf         = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltSSBandHalf;
            fltEstimBJStateStr.pInnerState.fltInFilt             = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltInFilt;
            fltEstimBJStateStr.pInnerState.pSSMAFilter           = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pSSMAFilter;
            
            
            
            fltEstimBJStateStr.pInnerState.u16MeasNum            = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u16MeasNum;
            fltEstimBJStateStr.pInnerState.fltMeDcArr[0]         = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltMeDcArr[0];
            fltEstimBJStateStr.pInnerState.fltMeDcArr[1]         = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltMeDcArr[1];
            fltEstimBJStateStr.pInnerState.fltWDcArr[0]          = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcArr[0];
            fltEstimBJStateStr.pInnerState.fltWDcArr[1]          = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcArr[1];
            fltEstimBJStateStr.pInnerState.fltInertiaArr[0]      = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltInertiaArr[0];
            fltEstimBJStateStr.pInnerState.fltInertiaArr[1]      = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltInertiaArr[1];
            fltEstimBJStateStr.pInnerState.fltWDcErr             = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcErr;
            
            fltEstimBJStateStr.pInnerState.fltGainFOC            = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltGainFOC;
            fltEstimBJStateStr.pInnerState.fltInvGainATO         = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltInvGainATO;
            fltEstimBJStateStr.pInnerState.fltPhShiftCorr        = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPhShiftCorr;
            
            fltEstimBJStateStr.fltKt                             = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltKt;
            fltEstimBJStateStr.fltJ                              = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltJ;
            fltEstimBJStateStr.fltA                              = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltA;
            fltEstimBJStateStr.fltB                              = ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltB;
            
            *(AMCLIB_ESTIMBJ_RET_T *)y1 = AMCLIB_EstimBJ_FLT((SWLIBS_2Syst_FLT *const)(y2BUS), (const SWLIBS_2Syst_FLT *const)(u1BUS), (tFloat)(u2), &fltEstimBJStateStr);
            
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pState                 = fltEstimBJStateStr.pInnerState.pState;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->bTwoPointMeas          = fltEstimBJStateStr.pInnerState.bTwoPointMeas;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32AlignTimer          = fltEstimBJStateStr.pInnerState.u32AlignTimer;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32TimerPreset         = fltEstimBJStateStr.pInnerState.u32TimerPreset;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltIReq                = fltEstimBJStateStr.pInnerState.fltIReq; 
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDCWReq1             = fltEstimBJStateStr.pInnerState.fltDCWReq1; 
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDCWReq2             = fltEstimBJStateStr.pInnerState.fltDCWReq2; 
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltACWReq              = fltEstimBJStateStr.pInnerState.fltACWReq; 
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWMax                = fltEstimBJStateStr.pInnerState.fltWMax;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPP                  = fltEstimBJStateStr.pInnerState.fltPP;
            
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWOl                 = fltEstimBJStateStr.pInnerState.fltWOl;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltThOl                = fltEstimBJStateStr.pInnerState.fltThOl;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pOLRamp                = fltEstimBJStateStr.pInnerState.pOLRamp;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pOLInteg               = fltEstimBJStateStr.pInnerState.pOLInteg;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pIqMAFilter            = fltEstimBJStateStr.pInnerState.pIqMAFilter;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pThRealTransform       = fltEstimBJStateStr.pInnerState.pThRealTransform;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pIDQRealFbck           = fltEstimBJStateStr.pInnerState.pIDQRealFbck;
            
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcReq              = fltEstimBJStateStr.pInnerState.fltWDcReq;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWAcMaxReq           = fltEstimBJStateStr.pInnerState.fltWAcMaxReq;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltIqDcReq             = fltEstimBJStateStr.pInnerState.fltIqDcReq;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltIqAcReq             = fltEstimBJStateStr.pInnerState.fltIqAcReq;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltIqAcMaxReq          = fltEstimBJStateStr.pInnerState.fltIqAcMaxReq;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWDcReqMAFilter        = fltEstimBJStateStr.pInnerState.pWDcReqMAFilter;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWAcMaxReqMAFilter     = fltEstimBJStateStr.pInnerState.pWAcMaxReqMAFilter;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWDcPI                 = fltEstimBJStateStr.pInnerState.pWDcPI;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWAcMaxPI              = fltEstimBJStateStr.pInnerState.pWAcMaxPI;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWAcMaxErr           = fltEstimBJStateStr.pInnerState.fltWAcMaxErr;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcErr2             = fltEstimBJStateStr.pInnerState.fltWDcErr2;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->f32Theta               = fltEstimBJStateStr.pInnerState.f32Theta;
            
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pUDQReq                = fltEstimBJStateStr.pInnerState.pUDQReq;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pIDQReqCLoop           = fltEstimBJStateStr.pInnerState.pIDQReqCLoop;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pIDQFbckCLoop          = fltEstimBJStateStr.pInnerState.pIDQFbckCLoop;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pCloopDPI              = fltEstimBJStateStr.pInnerState.pCurrentLoop.pPIrAWD;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pCloopQPI              = fltEstimBJStateStr.pInnerState.pCurrentLoop.pPIrAWQ;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltThEl                = fltEstimBJStateStr.pInnerState.fltThEl;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pThTransform           = fltEstimBJStateStr.pInnerState.pThTransform;
            
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDcRaw               = fltEstimBJStateStr.pInnerState.fltDcRaw;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pWABAcRaw              = fltEstimBJStateStr.pInnerState.pWABAcRaw;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pPllSinCosEst          = fltEstimBJStateStr.pInnerState.pPllSinCosEst;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDcFilt              = fltEstimBJStateStr.pInnerState.fltDcFilt;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltAcFilt              = fltEstimBJStateStr.pInnerState.fltAcFilt;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWABEstErr           = fltEstimBJStateStr.pInnerState.fltWABEstErr;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pPllDMAFilter          = fltEstimBJStateStr.pInnerState.pPllDMAFilter;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pPllQMAFilter          = fltEstimBJStateStr.pInnerState.pPllQMAFilter;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pPllDcMAFilter         = fltEstimBJStateStr.pInnerState.pPllDcMAFilter;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPllPiPropGain       = fltEstimBJStateStr.pInnerState.fltPllPiPropGain;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->f32ThAcEst             = fltEstimBJStateStr.pInnerState.f32ThAcEst;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->f32ThAcInc             = fltEstimBJStateStr.pInnerState.f32ThAcInc;
            
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pFluxEstim             = fltEstimBJStateStr.pInnerState.pFluxEstim;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltLd                  = fltEstimBJStateStr.pInnerState.fltLd;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltLq                  = fltEstimBJStateStr.pInnerState.fltLq;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWEl                 = fltEstimBJStateStr.pInnerState.fltWEl;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltThErr               = fltEstimBJStateStr.pInnerState.fltThErr;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltThEstim             = fltEstimBJStateStr.pInnerState.fltThEstim;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWEstim              = fltEstimBJStateStr.pInnerState.fltWEstim;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pTrackObsrv            = fltEstimBJStateStr.pInnerState.pTrackObsrv;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPsiRaw              = fltEstimBJStateStr.pInnerState.fltPsiRaw;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPsiFilt             = fltEstimBJStateStr.pInnerState.fltPsiFilt;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltDtVDrop             = fltEstimBJStateStr.pInnerState.fltDtVDrop;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pFluxMAFilter          = fltEstimBJStateStr.pInnerState.pFluxMAFilter;
            
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32SSTimeoutCnt        = fltEstimBJStateStr.pInnerState.u32SSTimeoutCnt;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32SSBandCnt           = fltEstimBJStateStr.pInnerState.u32SSBandCnt;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32SSTimeoutTime       = fltEstimBJStateStr.pInnerState.u32SSTimeoutTime;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u32SSTime              = fltEstimBJStateStr.pInnerState.u32SSTime;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltSSBandHalfMax       = fltEstimBJStateStr.pInnerState.fltSSBandHalfMax;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltSSBandHalf          = fltEstimBJStateStr.pInnerState.fltSSBandHalf;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltInFilt              = fltEstimBJStateStr.pInnerState.fltInFilt;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->pSSMAFilter            = fltEstimBJStateStr.pInnerState.pSSMAFilter;
            
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->u16MeasNum             = fltEstimBJStateStr.pInnerState.u16MeasNum;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltMeDcArr[0]          = fltEstimBJStateStr.pInnerState.fltMeDcArr[0];
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltMeDcArr[1]          = fltEstimBJStateStr.pInnerState.fltMeDcArr[1];
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcArr[0]           = fltEstimBJStateStr.pInnerState.fltWDcArr[0];
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcArr[1]           = fltEstimBJStateStr.pInnerState.fltWDcArr[1];
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltInertiaArr[0]       = fltEstimBJStateStr.pInnerState.fltInertiaArr[0];
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltInertiaArr[1]       = fltEstimBJStateStr.pInnerState.fltInertiaArr[1];
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltWDcErr              = fltEstimBJStateStr.pInnerState.fltWDcErr;
            
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltGainFOC             = fltEstimBJStateStr.pInnerState.fltGainFOC;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltInvGainATO          = fltEstimBJStateStr.pInnerState.fltInvGainATO;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltPhShiftCorr         = fltEstimBJStateStr.pInnerState.fltPhShiftCorr;
            
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltKt                  = fltEstimBJStateStr.fltKt;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltJ                   = fltEstimBJStateStr.fltJ;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltA                   = fltEstimBJStateStr.fltA;
            ((AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *const)(work1BUS))->fltB                   = fltEstimBJStateStr.fltB;
            
            *((tFloat *const)y3) = fltEstimBJStateStr.fltKt;
            *((tFloat *const)y4)  = fltEstimBJStateStr.fltJ;
            *((tFloat *const)y5)  = fltEstimBJStateStr.fltA;
            *((tFloat *const)y6)  = fltEstimBJStateStr.fltB;
            

            /* Assign the user structure y2BUS to the Simulink structure y2 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y2", "(*(SWLIBS_2Syst_FLT *)y2BUS)", 0)>

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(AMCLIB_ESTIMBJ_INNERST_SIM_T_FLT *)work1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("amclib.h")>
        %<LibAddToCommonIncludes("gdflib.h")>
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("gmclib.h")>
        %<LibAddToCommonIncludes("AMCLIB_EstimBJ.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GFLIB_Ramp.h")>
        %<LibAddToCommonIncludes("GFLIB_IntegratorTR.h")>
        %<LibAddToCommonIncludes("GDFLIB_FilterMA.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIpAW.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIrAW.h")>
        %<LibAddToCommonIncludes("AMCLIB_FluxEstimAB.h")>
        %<LibAddToCommonIncludes("AMCLIB_TrackObsrv.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %assign cDataFile = LibCreateSourceFile("Source", "Simulink", CompiledModel.Name)
        %openfile tmpParamBuf
          AMCLIB_ESTIMBJ_T_FLT fltEstimBJStateStr_%<SYSNAME(Name)[0]>;
          AMCLIB_ESTIMBJ_INIT_T_FLT pParam_%<SYSNAME(Name)[0]>;
        %closefile tmpParamBuf
        %<LibSetSourceFileSection(cDataFile, "Definitions", tmpParamBuf)>
        %assign cHeaderFile = LibCreateSourceFile("Header", "Simulink", CompiledModel.Name)
        %openfile tmpParamBuf
          extern AMCLIB_ESTIMBJ_T_FLT fltEstimBJStateStr_%<SYSNAME(Name)[0]>;
          extern AMCLIB_ESTIMBJ_INIT_T_FLT pParam_%<SYSNAME(Name)[0]>;
        %closefile tmpParamBuf
        %<LibSetSourceFileSection(cHeaderFile, "Declarations", tmpParamBuf)>
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y2BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u1BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_EstimBJ_SF_FLT_wrapper_allocmem(%<y2BUS_addr>, %<LibBlockOutputSignalWidth(1)>, %<u1BUS_addr>, %<LibBlockInputSignalWidth(0)>, %<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign cfg = CAST("Number",Parameter[0].Value[0])
        %assign u32SamplingFreq = CAST("Number",Parameter[1].Value[0])
        %assign fltIN = CAST("Real",Parameter[2].Value[0])
        %assign fltWN = CAST("Real",Parameter[3].Value[0])
        %assign fltPP = CAST("Real",Parameter[4].Value[0])
        %assign fltLd = CAST("Real",Parameter[5].Value[0])
        %assign fltLq = CAST("Real",Parameter[6].Value[0])
        %assign fltRs = CAST("Real",Parameter[7].Value[0])
        %assign fltDtVDrop = CAST("Real",Parameter[8].Value[0])
        %assign fltAlignTime = CAST("Real",Parameter[9].Value[0])
        %assign fltIReqOl = CAST("Real",Parameter[10].Value[0])
        %assign fltWStepOl = CAST("Real",Parameter[11].Value[0])
        %assign fltDCWReq1 = CAST("Real",Parameter[12].Value[0])
        %assign fltDCWReq2 = CAST("Real",Parameter[13].Value[0])
        %assign fltDcPiPropGain = CAST("Real",Parameter[14].Value[0])
        %assign fltDcPiIntegGain = CAST("Real",Parameter[15].Value[0])
        %assign fltAcPiPropGain = CAST("Real",Parameter[16].Value[0])
        %assign fltAcPiIntegGain = CAST("Real",Parameter[17].Value[0])
        %assign pInnState = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 2)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_EstimBJ_SF_FLT_wrapper_InitializeConditions(%<cfg>, %<u32SamplingFreq>, %<fltIN>, %<fltWN>, %<fltPP>, %<fltLd>, %<fltLq>, %<fltRs>, %<fltDtVDrop>, %<fltAlignTime>, %<fltIReqOl>, %<fltWStepOl>, %<fltDCWReq1>, %<fltDCWReq2>, %<fltDcPiPropGain>, %<fltDcPiIntegGain>, %<fltAcPiPropGain>, %<fltAcPiIntegGain>, %<pInnState>, %<work1BUS_ptr>);
    %else
        %assign cfg = CAST("Number",Parameter[0].Value[0])
        %assign u32SamplingFreq = CAST("Number",Parameter[1].Value[0])
        %assign fltIN = CAST("Real",Parameter[2].Value[0])
        %assign fltWN = CAST("Real",Parameter[3].Value[0])
        %assign fltPP = CAST("Real",Parameter[4].Value[0])
        %assign fltLd = CAST("Real",Parameter[5].Value[0])
        %assign fltLq = CAST("Real",Parameter[6].Value[0])
        %assign fltRs = CAST("Real",Parameter[7].Value[0])
        %assign fltDtVDrop = CAST("Real",Parameter[8].Value[0])
        %assign fltAlignTime = CAST("Real",Parameter[9].Value[0])
        %assign fltIReqOl = CAST("Real",Parameter[10].Value[0])
        %assign fltWStepOl = CAST("Real",Parameter[11].Value[0])
        %assign fltDCWReq1 = CAST("Real",Parameter[12].Value[0])
        %assign fltDCWReq2 = CAST("Real",Parameter[13].Value[0])
        %assign fltDcPiPropGain = CAST("Real",Parameter[14].Value[0])
        %assign fltDcPiIntegGain = CAST("Real",Parameter[15].Value[0])
        %assign fltAcPiPropGain = CAST("Real",Parameter[16].Value[0])
        %assign fltAcPiIntegGain = CAST("Real",Parameter[17].Value[0])
        %assign pInnState = LibBlockDWork(work1, "", "", 0)
        %% 
        pParam_%<SYSNAME(Name)[0]>.fltIN            = (tFloat)(%<fltIN>);	
        pParam_%<SYSNAME(Name)[0]>.fltWN            = (tFloat)(%<fltWN>);		
        pParam_%<SYSNAME(Name)[0]>.fltPP 		        = (tFloat)(%<fltPP>);		  
        pParam_%<SYSNAME(Name)[0]>.fltLd            = (tFloat)(%<fltLd>);
        pParam_%<SYSNAME(Name)[0]>.fltLq            = (tFloat)(%<fltLq>);
        pParam_%<SYSNAME(Name)[0]>.fltRs            = (tFloat)(%<fltRs>);
        pParam_%<SYSNAME(Name)[0]>.fltDtVDrop       = (tFloat)(%<fltDtVDrop>);
        pParam_%<SYSNAME(Name)[0]>.u32SamplingFreq  = (tU32)(%<u32SamplingFreq>);
        %if (cfg == 1)
          pParam_%<SYSNAME(Name)[0]>.fltAlignTime     = 0.0f;
          pParam_%<SYSNAME(Name)[0]>.fltIReqOl        = 0.0f;
          pParam_%<SYSNAME(Name)[0]>.fltWStepOl       = 0.0f;
          pParam_%<SYSNAME(Name)[0]>.fltDCWReq1       = 0.0f;
          pParam_%<SYSNAME(Name)[0]>.fltDCWReq2       = 0.0f;
          pParam_%<SYSNAME(Name)[0]>.fltDcPiPropGain  = 0.0f;
          pParam_%<SYSNAME(Name)[0]>.fltDcPiIntegGain = 0.0f;
          pParam_%<SYSNAME(Name)[0]>.fltAcPiPropGain  = 0.0f;
          pParam_%<SYSNAME(Name)[0]>.fltAcPiIntegGain = 0.0f;
        %endif
        %if (cfg == 2)
          pParam_%<SYSNAME(Name)[0]>.fltAlignTime     = (tFloat)(%<fltAlignTime>);
          pParam_%<SYSNAME(Name)[0]>.fltIReqOl        = (tFloat)(%<fltIReqOl>);
          pParam_%<SYSNAME(Name)[0]>.fltWStepOl       = (tFloat)(%<fltWStepOl>);
          pParam_%<SYSNAME(Name)[0]>.fltDCWReq1       = (tFloat)(%<fltDCWReq1>);
          pParam_%<SYSNAME(Name)[0]>.fltDCWReq2       = (tFloat)(%<fltDCWReq2>);
          pParam_%<SYSNAME(Name)[0]>.fltDcPiPropGain  = (tFloat)(%<fltDcPiPropGain>);
          pParam_%<SYSNAME(Name)[0]>.fltDcPiIntegGain = (tFloat)(%<fltDcPiIntegGain>);
          pParam_%<SYSNAME(Name)[0]>.fltAcPiPropGain  = (tFloat)(%<fltAcPiPropGain>);
          pParam_%<SYSNAME(Name)[0]>.fltAcPiIntegGain = (tFloat)(%<fltAcPiIntegGain>);
        %endif
        AMCLIB_EstimBJInit_FLT(&fltEstimBJStateStr_%<SYSNAME(Name)[0]>, pParam_%<SYSNAME(Name)[0]>);
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign pRet = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign pUAlBeReq = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y2BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign fltKt = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign fltJ = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign fltA = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign fltB = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign pIAlBeFbck = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign fltUDcBus = LibBlockInputSignal(1, "", "", 0)
        %assign pInnState = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 2)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_EstimBJ_SF_FLT_wrapper_Output(%<pRet>, %<pUAlBeReq>, %<y2BUS_ptr>, %<fltKt>, %<fltJ>, %<fltA>, %<fltB>, %<pIAlBeFbck>, %<u1BUS_ptr>, %<fltUDcBus>, %<pInnState>, %<work1BUS_ptr>);
    %else
        %assign pRet = LibBlockOutputSignal(0, "", "", 0)
        %assign pUAlBeReq = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign fltKt = LibBlockOutputSignal(2, "", "", 0)
        %assign fltJ = LibBlockOutputSignal(3, "", "", 0)
        %assign fltA = LibBlockOutputSignal(4, "", "", 0)
        %assign fltB = LibBlockOutputSignal(5, "", "", 0)
        %assign pIAlBeFbck = LibBlockInputSignalAddr(0, "", "", 0)
        %assign fltUDcBus = LibBlockInputSignal(1, "", "", 0)
        %assign pInnState = LibBlockDWork(work1, "", "", 0)
        %% 
          %<pRet> = AMCLIB_EstimBJ_FLT((SWLIBS_2Syst_FLT *const)(%<pUAlBeReq>), (const SWLIBS_2Syst_FLT *const)(%<pIAlBeFbck>), (tFloat)(%<fltUDcBus>), &fltEstimBJStateStr_%<SYSNAME(Name)[0]>);
          %<fltKt> = fltEstimBJStateStr_%<SYSNAME(Name)[0]>.fltKt;
          %<fltJ>  = fltEstimBJStateStr_%<SYSNAME(Name)[0]>.fltJ;
          %<fltA>  = fltEstimBJStateStr_%<SYSNAME(Name)[0]>.fltA;
          %<fltB>  = fltEstimBJStateStr_%<SYSNAME(Name)[0]>.fltB;
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_EstimBJ_SF_FLT_wrapper_freemem(%<y2BUSBUS_addr>, %<u1BUSBUS_addr>, %<work1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
