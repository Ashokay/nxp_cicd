%% file : AMCLIB_EstimRL_SF_FLT.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for AMCLIB_EstimRL_SF_FLT
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 12-Sep-2023 09:22:33

%% Copyright 2021-2023 NXP
%%
%% NXP Confidential and Proprietary. This software is owned or controlled by NXP and may only be
%% used strictly in accordance with the applicable license terms.  By expressly accepting such
%% terms or by downloading, installing, activating and/or otherwise using the software, you are
%% agreeing that you have read, and that you agree to comply with and are bound by, such license
%% terms. If you do not agree to be bound by the applicable license terms, then you may not retain,
%% install, activate or otherwise use the software.

%implements AMCLIB_EstimRL_SF_FLT "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("AMCLIB_EstimRL_SF_FLT_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int AMCLIB_EstimRL_SF_FLT_wrapper_allocmem(void** y2BUS, int_T y2BUSWidth, void** u1BUS, int_T u1BUSWidth, void** work1BUS, int_T work1BUSWidth);
        extern int AMCLIB_EstimRL_SF_FLT_wrapper_freemem(void** y2BUS, void** u1BUS, void** work1BUS);

        extern void AMCLIB_EstimRL_SF_FLT_wrapper_InitializeConditions(const uint32_T p1,  void* work1, void* work1BUS, const real32_T p2, const uint16_T p3, const real32_T p4, const real32_T p5, const real32_T p6, const int32_T p7);
        extern void AMCLIB_EstimRL_SF_FLT_wrapper_Output( void* y1,  void* y2, void* y2BUS,  real32_T* y3,  real32_T* y4,  real32_T* y5,  real32_T* y6,  real32_T* y7, const void* u1, void* u1BUS, const real32_T u2,  void* work1, void* work1BUS, const real32_T u3, const real32_T u4, const real32_T u5, const uint16_T u6, const uint8_T u7, const uint16_T p3, const int32_T p7);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("AMCLIB_EstimRL_SF_FLT_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "amclib.h"
        #include "gdflib.h"
        #include "gflib.h"
        #include "gmclib.h"

        #include "SWLIBS_Typedefs.h"
        #include "AMCLIB_EstimRL.h"
        #include "GDFLIB_FilterMA.h"

        int AMCLIB_EstimRL_SF_FLT_wrapper_allocmem(void** y2BUS, int_T y2BUSWidth, void** u1BUS, int_T u1BUSWidth, void** work1BUS, int_T work1BUSWidth) {
            *y2BUS = calloc(sizeof(SWLIBS_2Syst_FLT), y2BUSWidth);
            if (*y2BUS==NULL) return -1;
            *u1BUS = calloc(sizeof(SWLIBS_2Syst_FLT), u1BUSWidth);
            if (*u1BUS==NULL) return -1;
            *work1BUS = calloc(sizeof(AMCLIB_ESTIMRL_T_FLT), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            return 0;
        }
        
        int AMCLIB_EstimRL_SF_FLT_wrapper_freemem(void** y2BUS, void** u1BUS, void** work1BUS) {
            if (*y2BUS!=NULL) free(*y2BUS);
            *y2BUS = NULL;
            if (*u1BUS!=NULL) free(*u1BUS);
            *u1BUS = NULL;
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            return 0;
        }

        void AMCLIB_EstimRL_SF_FLT_wrapper_InitializeConditions(const uint32_T p1,  void* work1, void* work1BUS, const real32_T p2, const uint16_T p3, const real32_T p4, const real32_T p5, const real32_T p6, const int32_T p7) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(AMCLIB_ESTIMRL_T_FLT *)work1BUS)", "(char *)work1", 0)>

            if(1 == (tS32)(p7))
            {
              AMCLIB_EstimRLInit_FLT((tU32)(p1), (AMCLIB_ESTIMRL_T_FLT *const)(work1BUS), ESTIMRL_INIT_DEFAULT_FLT((tFloat)(p2)));
            }
            if(2 == (tS32)(p7))
            {
              AMCLIB_EstimRLInit_FLT((tU32)(p1), (AMCLIB_ESTIMRL_T_FLT *const)(work1BUS), ESTIMRL_INIT_CFG1_FLT((tFloat)(p2), (tU16)(p3), (tFloat)(p5)));
            }
            if(3 == (tS32)(p7))
            {
              AMCLIB_EstimRLInit_FLT((tU32)(p1), (AMCLIB_ESTIMRL_T_FLT *const)(work1BUS), ESTIMRL_INIT_CFG2_FLT((tFloat)(p2), (tU16)(p3), (tFloat)(p4), (tFloat)(p5), (tFloat)(p6)));
            }
            if(4 == (tS32)(p7))
            {
              AMCLIB_EstimRLInit_FLT((tU32)(p1), (AMCLIB_ESTIMRL_T_FLT *const)(work1BUS), ESTIMRL_INIT_CFG3_FLT);
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(AMCLIB_ESTIMRL_T_FLT *)work1BUS)", 0)>
        }

        void AMCLIB_EstimRL_SF_FLT_wrapper_Output( void* y1,  void* y2, void* y2BUS,  real32_T* y3,  real32_T* y4,  real32_T* y5,  real32_T* y6,  real32_T* y7, const void* u1, void* u1BUS, const real32_T u2,  void* work1, void* work1BUS, const real32_T u3, const real32_T u4, const real32_T u5, const uint16_T u6, const uint8_T u7, const uint16_T p3, const int32_T p7) {

            /* Assign the Simulink structure u1 to user structure u1BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(0)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_2Syst_FLT *)u1BUS)", "(char *)u1", 0)>


            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(AMCLIB_ESTIMRL_T_FLT *)work1BUS)", "(char *)work1", 0)>

            
            if(1 == (tS32)(p7))
            {
              *(AMCLIB_ESTIMRL_RET_T *)y1 = AMCLIB_EstimRL_FLT((SWLIBS_2Syst_FLT *const)(y2BUS), (const SWLIBS_2Syst_FLT *const)(u1BUS), (tFloat)(u2), (AMCLIB_ESTIMRL_T_FLT *const)(work1BUS), ESTIMRL_RUN_DEFAULT_FLT);
            }
            if(2 == (tS32)(p7))
            {
              *(AMCLIB_ESTIMRL_RET_T *)y1 = AMCLIB_EstimRL_FLT((SWLIBS_2Syst_FLT *const)(y2BUS), (const SWLIBS_2Syst_FLT *const)(u1BUS), (tFloat)(u2), (AMCLIB_ESTIMRL_T_FLT *const)(work1BUS), ESTIMRL_RUN_CFG1_FLT((tFloat *)(y7)));
            }
            if(3 == (tS32)(p7))
            {
              *(AMCLIB_ESTIMRL_RET_T *)y1 = AMCLIB_EstimRL_FLT((SWLIBS_2Syst_FLT *const)(y2BUS), (const SWLIBS_2Syst_FLT *const)(u1BUS), (tFloat)(u2), (AMCLIB_ESTIMRL_T_FLT *const)(work1BUS), ESTIMRL_RUN_CFG2_FLT((tFloat *)(y7)));
            }
            if(4 == (tS32)(p7))
            {
              *(AMCLIB_ESTIMRL_RET_T *)y1 = AMCLIB_EstimRL_FLT((SWLIBS_2Syst_FLT *const)(y2BUS), (const SWLIBS_2Syst_FLT *const)(u1BUS), (tFloat)(u2), (AMCLIB_ESTIMRL_T_FLT *const)(work1BUS), ESTIMRL_RUN_CFG3_FLT((tFloat)(u3), (tFloat)(u4), (tFloat)(u5), (tU16)(u6), (tU8)(u7)));
            }
            *((tFloat *const)y3)  = ((AMCLIB_ESTIMRL_T_FLT *const)(work1BUS))->fltLd;
            *((tFloat *const)y4)  = ((AMCLIB_ESTIMRL_T_FLT *const)(work1BUS))->fltLq;
            *((tFloat *const)y5)   = ((AMCLIB_ESTIMRL_T_FLT *const)(work1BUS))->fltR;
            *((tFloat *const)y6) = ((AMCLIB_ESTIMRL_T_FLT *const)(work1BUS))->fltUdt;

            /* Assign the user structure y2BUS to the Simulink structure y2 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y2", "(*(SWLIBS_2Syst_FLT *)y2BUS)", 0)>

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(AMCLIB_ESTIMRL_T_FLT *)work1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("amclib.h")>
        %<LibAddToCommonIncludes("gdflib.h")>
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("gmclib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("AMCLIB_EstimRL.h")>
        %<LibAddToCommonIncludes("GDFLIB_FilterMA.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y2BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u1BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_EstimRL_SF_FLT_wrapper_allocmem(%<y2BUS_addr>, %<LibBlockOutputSignalWidth(1)>, %<u1BUS_addr>, %<LibBlockInputSignalWidth(0)>, %<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u32SamplingFreq = CAST("Number",Parameter[0].Value[0])
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign fltIDcMax = CAST("Real",Parameter[1].Value[0])
        %assign u16LdqNumMeas = CAST("Number",Parameter[2].Value[0])
        %assign fltIDcLd = CAST("Real",Parameter[3].Value[0])
        %assign fltIDcLq = CAST("Real",Parameter[4].Value[0])
        %assign fltIDcNegMax = CAST("Real",Parameter[5].Value[0])
        %assign cfg = CAST("Number",Parameter[6].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_EstimRL_SF_FLT_wrapper_InitializeConditions(%<u32SamplingFreq>, %<pCtrl>, %<work1BUS_ptr>, %<fltIDcMax>, %<u16LdqNumMeas>, %<fltIDcLd>, %<fltIDcLq>, %<fltIDcNegMax>, %<cfg>);
    %else
        %assign u32SamplingFreq = CAST("Number",Parameter[0].Value[0])
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign fltIDcMax = CAST("Real",Parameter[1].Value[0])
        %assign u16LdqNumMeas = CAST("Number",Parameter[2].Value[0])
        %assign fltIDcLd = CAST("Real",Parameter[3].Value[0])
        %assign fltIDcLq = CAST("Real",Parameter[4].Value[0])
        %assign fltIDcNegMax = CAST("Real",Parameter[5].Value[0])
        %assign cfg = CAST("Number",Parameter[6].Value[0])
        %% 
        %if (cfg == 1)
          AMCLIB_EstimRLInit_FLT((tU32)(%<u32SamplingFreq>), (AMCLIB_ESTIMRL_T_FLT *const)(%<pCtrl>), ESTIMRL_INIT_DEFAULT_FLT((tFloat)(%<fltIDcMax>)));
        %endif
        %if (cfg == 2)
          AMCLIB_EstimRLInit_FLT((tU32)(%<u32SamplingFreq>), (AMCLIB_ESTIMRL_T_FLT *const)(%<pCtrl>), ESTIMRL_INIT_CFG1_FLT((tFloat)(%<fltIDcMax>), (tU16)(%<u16LdqNumMeas>), (tFloat)(%<fltIDcLq>)));
        %endif
        %if (cfg == 3)
          AMCLIB_EstimRLInit_FLT((tU32)(%<u32SamplingFreq>), (AMCLIB_ESTIMRL_T_FLT *const)(%<pCtrl>), ESTIMRL_INIT_CFG2_FLT((tFloat)(%<fltIDcMax>), (tU16)(%<u16LdqNumMeas>), (tFloat)(%<fltIDcLd>), (tFloat)(%<fltIDcLq>), (tFloat)(%<fltIDcNegMax>)));
        %endif
        %if (cfg == 4)
          AMCLIB_EstimRLInit_FLT((tU32)(%<u32SamplingFreq>), (AMCLIB_ESTIMRL_T_FLT *const)(%<pCtrl>), ESTIMRL_INIT_CFG3_FLT);
        %endif
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign pRet = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign pUAlBeReq = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y2BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign fltLd = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign fltLq = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign fltR = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign fltUdt = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign pLdqTable = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign pIAlBeFbck = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u1BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign fltUDcBus = LibBlockInputSignal(1, "", "", 0)
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign fltIDcDReq = LibBlockInputSignal(2, "", "", 0)
        %assign fltIDcQReq = LibBlockInputSignal(3, "", "", 0)
        %assign fltIAcReq = LibBlockInputSignal(4, "", "", 0)
        %assign u16FAc = LibBlockInputSignal(5, "", "", 0)
        %assign u8LdqSwitch = LibBlockInputSignal(6, "", "", 0)
        %assign u16LdqNumMeas = CAST("Number",Parameter[2].Value[0])
        %assign cfg = CAST("Number",Parameter[6].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        AMCLIB_EstimRL_SF_FLT_wrapper_Output(%<pRet>, %<pUAlBeReq>, %<y2BUS_ptr>, %<fltLd>, %<fltLq>, %<fltR>, %<fltUdt>, %<pLdqTable>, %<pIAlBeFbck>, %<u1BUS_ptr>, %<fltUDcBus>, %<pCtrl>, %<work1BUS_ptr>, %<fltIDcDReq>, %<fltIDcQReq>, %<fltIAcReq>, %<u16FAc>, %<u8LdqSwitch>, %<u16LdqNumMeas>, %<cfg>);
    %else
        %assign pRet = LibBlockOutputSignal(0, "", "", 0)
        %assign pUAlBeReq = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign fltLd = LibBlockOutputSignal(2, "", "", 0)
        %assign fltLq = LibBlockOutputSignal(3, "", "", 0)
        %assign fltR = LibBlockOutputSignal(4, "", "", 0)
        %assign fltUdt = LibBlockOutputSignal(5, "", "", 0)
        %assign pLdqTable = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign pIAlBeFbck = LibBlockInputSignalAddr(0, "", "", 0)
        %assign fltUDcBus = LibBlockInputSignal(1, "", "", 0)
        %assign pCtrl = LibBlockDWorkAddr(work1, "", "", 0)
        %assign fltIDcDReq = LibBlockInputSignal(2, "", "", 0)
        %assign fltIDcQReq = LibBlockInputSignal(3, "", "", 0)
        %assign fltIAcReq = LibBlockInputSignal(4, "", "", 0)
        %assign u16FAc = LibBlockInputSignal(5, "", "", 0)
        %assign u8LdqSwitch = LibBlockInputSignal(6, "", "", 0)
        %assign u16LdqNumMeas = CAST("Number",Parameter[2].Value[0])
        %assign cfg = CAST("Number",Parameter[6].Value[0])
        %% 
        
        %if (cfg == 1)
          %<pRet> = AMCLIB_EstimRL_FLT((SWLIBS_2Syst_FLT *const)(%<pUAlBeReq>), (const SWLIBS_2Syst_FLT *const)(%<pIAlBeFbck>), (tFloat)(%<fltUDcBus>), (AMCLIB_ESTIMRL_T_FLT *const)(%<pCtrl>), ESTIMRL_RUN_DEFAULT_FLT);
        %endif
        %if (cfg == 2)
          %<pRet> = AMCLIB_EstimRL_FLT((SWLIBS_2Syst_FLT *const)(%<pUAlBeReq>), (const SWLIBS_2Syst_FLT *const)(%<pIAlBeFbck>), (tFloat)(%<fltUDcBus>), (AMCLIB_ESTIMRL_T_FLT *const)(%<pCtrl>), ESTIMRL_RUN_CFG1_FLT((tFloat *)(%<pLdqTable>)));
        %endif
        %if (cfg == 3)
          %<pRet> = AMCLIB_EstimRL_FLT((SWLIBS_2Syst_FLT *const)(%<pUAlBeReq>), (const SWLIBS_2Syst_FLT *const)(%<pIAlBeFbck>), (tFloat)(%<fltUDcBus>), (AMCLIB_ESTIMRL_T_FLT *const)(%<pCtrl>), ESTIMRL_RUN_CFG2_FLT((tFloat *)(%<pLdqTable>)));
        %endif
        %if (cfg == 4)
          %<pRet> = AMCLIB_EstimRL_FLT((SWLIBS_2Syst_FLT *const)(%<pUAlBeReq>), (const SWLIBS_2Syst_FLT *const)(%<pIAlBeFbck>), (tFloat)(%<fltUDcBus>), (AMCLIB_ESTIMRL_T_FLT *const)(%<pCtrl>), ESTIMRL_RUN_CFG3_FLT((tFloat)(%<fltIDcDReq>), (tFloat)(%<fltIDcQReq>), (tFloat)(%<fltIAcReq>), (tU16)(%<u16FAc>), (tU8)(%<u8LdqSwitch>)));
        %endif
        %<fltLd>  = ((AMCLIB_ESTIMRL_T_FLT *const)(%<pCtrl>))->fltLd;
        %<fltLq>  = ((AMCLIB_ESTIMRL_T_FLT *const)(%<pCtrl>))->fltLq;
        %<fltR>   = ((AMCLIB_ESTIMRL_T_FLT *const)(%<pCtrl>))->fltR;
        %<fltUdt> = ((AMCLIB_ESTIMRL_T_FLT *const)(%<pCtrl>))->fltUdt;
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign u1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (AMCLIB_EstimRL_SF_FLT_wrapper_freemem(%<y2BUSBUS_addr>, %<u1BUSBUS_addr>, %<work1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
