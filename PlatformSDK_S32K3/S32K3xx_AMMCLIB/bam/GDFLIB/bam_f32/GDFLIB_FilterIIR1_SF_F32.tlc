%% file : GDFLIB_FilterIIR1_SF_F32.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for GDFLIB_FilterIIR1_SF_F32
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 12-Sep-2023 09:21:17

%% Copyright 2019-2023 NXP
%%
%% NXP Confidential and Proprietary. This software is owned or controlled by NXP and may only be
%% used strictly in accordance with the applicable license terms.  By expressly accepting such
%% terms or by downloading, installing, activating and/or otherwise using the software, you are
%% agreeing that you have read, and that you agree to comply with and are bound by, such license
%% terms. If you do not agree to be bound by the applicable license terms, then you may not retain,
%% install, activate or otherwise use the software.

%implements GDFLIB_FilterIIR1_SF_F32 "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("GDFLIB_FilterIIR1_SF_F32_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int GDFLIB_FilterIIR1_SF_F32_wrapper_allocmem(void** work1BUS, int_T work1BUSWidth);
        extern int GDFLIB_FilterIIR1_SF_F32_wrapper_freemem(void** work1BUS);

        extern void GDFLIB_FilterIIR1_SF_F32_wrapper_InitializeConditions(const void* p2, const void* p3, const void* p4,  void* work1, void* work1BUS, const real_T p5, const real_T p6, const real_T p7, const int32_T p8);
        extern void GDFLIB_FilterIIR1_SF_F32_wrapper_Output( int32_T* y1, const int32_T u1, const int32_T u2, const int32_T u3, const int32_T u4, const int32_T u5, const int32_T u6,  void* work1, void* work1BUS,  int32_T* y2,  int32_T* y3, const int32_T p1);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("GDFLIB_FilterIIR1_SF_F32_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "gdflib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GDFLIB_FilterIIR1.h"

        int GDFLIB_FilterIIR1_SF_F32_wrapper_allocmem(void** work1BUS, int_T work1BUSWidth) {
            *work1BUS = calloc(sizeof(GDFLIB_FILTER_IIR1_T_F32), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            return 0;
        }
        
        int GDFLIB_FilterIIR1_SF_F32_wrapper_freemem(void** work1BUS) {
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            return 0;
        }

        void GDFLIB_FilterIIR1_SF_F32_wrapper_InitializeConditions(const void* p2, const void* p3, const void* p4,  void* work1, void* work1BUS, const real_T p5, const real_T p6, const real_T p7, const int32_T p8) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_IIR1_T_F32 *)work1BUS)", "(char *)work1", 0)>

            ((GDFLIB_FILTER_IIR1_T_F32 *const)(work1BUS))->trFiltCoeff.f32B0 = *(tFrac32 *)(p2);
            ((GDFLIB_FILTER_IIR1_T_F32 *const)(work1BUS))->trFiltCoeff.f32B1 = *(tFrac32 *)(p3);
            ((GDFLIB_FILTER_IIR1_T_F32 *const)(work1BUS))->trFiltCoeff.f32A1 = *(tFrac32 *)(p4);
            GDFLIB_FilterIIR1Init_F32((GDFLIB_FILTER_IIR1_T_F32 *const)(work1BUS));  

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GDFLIB_FILTER_IIR1_T_F32 *)work1BUS)", 0)>
        }

        void GDFLIB_FilterIIR1_SF_F32_wrapper_Output( int32_T* y1, const int32_T u1, const int32_T u2, const int32_T u3, const int32_T u4, const int32_T u5, const int32_T u6,  void* work1, void* work1BUS,  int32_T* y2,  int32_T* y3, const int32_T p1) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GDFLIB_FILTER_IIR1_T_F32 *)work1BUS)", "(char *)work1", 0)>

            
            if((tS32)2 == (tS32)(p1))
            {
              ((GDFLIB_FILTER_IIR1_T_F32 *const)(work1BUS))->f32FiltBufferX[0] = (tFrac32)(u5);
              ((GDFLIB_FILTER_IIR1_T_F32 *const)(work1BUS))->f32FiltBufferY[0] = (tFrac32)(u6);
              ((GDFLIB_FILTER_IIR1_T_F32 *const)(work1BUS))->trFiltCoeff.f32B0 = (tFrac32)(u2);
              ((GDFLIB_FILTER_IIR1_T_F32 *const)(work1BUS))->trFiltCoeff.f32B1 = (tFrac32)(u3);
              ((GDFLIB_FILTER_IIR1_T_F32 *const)(work1BUS))->trFiltCoeff.f32A1 = (tFrac32)(u4);
            }  
            *y1 = GDFLIB_FilterIIR1_F32((tFrac32)(u1), (GDFLIB_FILTER_IIR1_T_F32 *const)(work1BUS));
            if((tS32)2 == (tS32)(p1))
            {
              *((tFrac32 *)y2) = ((GDFLIB_FILTER_IIR1_T_F32 *const)(work1BUS))->f32FiltBufferX[0];
              *((tFrac32 *)y3) = ((GDFLIB_FILTER_IIR1_T_F32 *const)(work1BUS))->f32FiltBufferY[0];
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GDFLIB_FILTER_IIR1_T_F32 *)work1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("gdflib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GDFLIB_FilterIIR1.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GDFLIB_FilterIIR1_SF_F32_wrapper_allocmem(%<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign f32B0 = CAST("Number",Parameter[1].Value[0])
        %assign f32B1 = CAST("Number",Parameter[2].Value[0])
        %assign f32A1 = CAST("Number",Parameter[3].Value[0])
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign b0 = CAST("Real",Parameter[4].Value[0])
        %assign b1 = CAST("Real",Parameter[5].Value[0])
        %assign a1 = CAST("Real",Parameter[6].Value[0])
        %assign autoCalcEn = CAST("Number",Parameter[7].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            int32_T p2_val = (int32_T)%<p2_val>;
            int32_T p3_val = (int32_T)%<p3_val>;
            int32_T p4_val = (int32_T)%<p4_val>;
        %if(autoCalcEn == 1)
          %assign b0sc=b0/8.0
          %assign b1sc=b1/8.0
          %assign a1sc=a1/8.0
          %assign f32B0=b0sc*2147483648.0
          %if f32B0>2147483647.0
            %assign f32B0=2147483647.0
          %endif
          %if f32B0<-2147483648.0
            %assign f32B0=-2147483648.0
          %endif
          %assign f32B0 = CAST("Number",f32B0)
          %assign f32B1=b1sc*2147483648.0
          %if f32B1>2147483647.0
            %assign f32B1=2147483647.0
          %endif
          %if f32B1<-2147483648.0
            %assign f32B1=-2147483648.0
          %endif
          %assign f32B1 = CAST("Number",f32B1)
          %assign f32A1=a1sc*2147483648.0
          %if f32A1>2147483647.0
            %assign f32A1=2147483647.0
          %endif
          %if f32A1<-2147483648.0
            %assign f32A1=-2147483648.0
          %endif
          %assign f32A1 = CAST("Number",f32A1)
        %endif
            GDFLIB_FilterIIR1_SF_F32_wrapper_InitializeConditions((void *)&p2_val, (void *)&p3_val, (void *)&p4_val, %<pParam>, %<work1BUS_ptr>, %<b0>, %<b1>, %<a1>, %<autoCalcEn>);
        
        }
    %else
        %assign f32B0 = CAST("Number",Parameter[1].Value[0])
        %assign f32B1 = CAST("Number",Parameter[2].Value[0])
        %assign f32A1 = CAST("Number",Parameter[3].Value[0])
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign b0 = CAST("Real",Parameter[4].Value[0])
        %assign b1 = CAST("Real",Parameter[5].Value[0])
        %assign a1 = CAST("Real",Parameter[6].Value[0])
        %assign autoCalcEn = CAST("Number",Parameter[7].Value[0])
        %% 
        %if(autoCalcEn == 1)
          %assign b0sc=b0/8.0
          %assign b1sc=b1/8.0
          %assign a1sc=a1/8.0
          %assign f32B0=b0sc*2147483648.0
          %if f32B0>2147483647.0
            %assign f32B0=2147483647.0
          %endif
          %if f32B0<-2147483648.0
            %assign f32B0=-2147483648.0
          %endif
          %assign f32B0 = CAST("Number",f32B0)
          %assign f32B1=b1sc*2147483648.0
          %if f32B1>2147483647.0
            %assign f32B1=2147483647.0
          %endif
          %if f32B1<-2147483648.0
            %assign f32B1=-2147483648.0
          %endif
          %assign f32B1 = CAST("Number",f32B1)
          %assign f32A1=a1sc*2147483648.0
          %if f32A1>2147483647.0
            %assign f32A1=2147483647.0
          %endif
          %if f32A1<-2147483648.0
            %assign f32A1=-2147483648.0
          %endif
          %assign f32A1 = CAST("Number",f32A1)
        %endif
        (%<pParam>)->trFiltCoeff.f32B0 = (tFrac32)(%<f32B0>);
        (%<pParam>)->trFiltCoeff.f32B1 = (tFrac32)(%<f32B1>);
        (%<pParam>)->trFiltCoeff.f32A1 = (tFrac32)(%<f32A1>);
        GDFLIB_FilterIIR1Init_F32((GDFLIB_FILTER_IIR1_T_F32 *const)(%<pParam>));  
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign f32RetVal = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign f32In = LibBlockInputSignal(0, "", "", 0)
        %assign f32B0 = LibBlockInputSignal(1, "", "", 0)
        %assign f32B1 = LibBlockInputSignal(2, "", "", 0)
        %assign f32A1 = LibBlockInputSignal(3, "", "", 0)
        %assign f32FiltBufferX = LibBlockInputSignal(4, "", "", 0)
        %assign f32FiltBufferY = LibBlockInputSignal(5, "", "", 0)
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign f32FiltBufferX_Out = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign f32FiltBufferY_Out = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %if (showStates == 2)
          %<LibReportFatalError("BAM blocks with shown debugging inputs/outputs are not supported in rapid accelerator mode.")>
        %endif
        GDFLIB_FilterIIR1_SF_F32_wrapper_Output(%<f32RetVal>, %<f32In>, %<f32B0>, %<f32B1>, %<f32A1>, %<f32FiltBufferX>, %<f32FiltBufferY>, %<pParam>, %<work1BUS_ptr>, %<f32FiltBufferX_Out>, %<f32FiltBufferY_Out>, %<showStates>);
    %else
        %assign f32RetVal = LibBlockOutputSignal(0, "", "", 0)
        %assign f32In = LibBlockInputSignal(0, "", "", 0)
        %assign f32B0 = LibBlockInputSignal(1, "", "", 0)
        %assign f32B1 = LibBlockInputSignal(2, "", "", 0)
        %assign f32A1 = LibBlockInputSignal(3, "", "", 0)
        %assign f32FiltBufferX = LibBlockInputSignal(4, "", "", 0)
        %assign f32FiltBufferY = LibBlockInputSignal(5, "", "", 0)
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign f32FiltBufferX_Out = LibBlockOutputSignal(1, "", "", 0)
        %assign f32FiltBufferY_Out = LibBlockOutputSignal(2, "", "", 0)
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %% 
        
        %if (showStates == 2)
          (%<pParam>)->f32FiltBufferX[0] = (tFrac32)(%<f32FiltBufferX>);
          (%<pParam>)->f32FiltBufferY[0] = (tFrac32)(%<f32FiltBufferY>);
          (%<pParam>)->trFiltCoeff.f32B0 = (tFrac32)(%<f32B0>);
          (%<pParam>)->trFiltCoeff.f32B1 = (tFrac32)(%<f32B1>);
          (%<pParam>)->trFiltCoeff.f32A1 = (tFrac32)(%<f32A1>);
        %endif  
        %<f32RetVal> = GDFLIB_FilterIIR1_F32((tFrac32)(%<f32In>), (GDFLIB_FILTER_IIR1_T_F32 *const)(%<pParam>));
        %if (showStates == 2)
          %<f32FiltBufferX_Out> = ((GDFLIB_FILTER_IIR1_T_F32 *const)(%<pParam>))->f32FiltBufferX[0];
          %<f32FiltBufferY_Out> = ((GDFLIB_FILTER_IIR1_T_F32 *const)(%<pParam>))->f32FiltBufferY[0];
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GDFLIB_FilterIIR1_SF_F32_wrapper_freemem(%<work1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
