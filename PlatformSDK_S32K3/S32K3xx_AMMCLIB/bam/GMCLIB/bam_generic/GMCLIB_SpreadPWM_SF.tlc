%% file : GMCLIB_SpreadPWM_SF.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for GMCLIB_SpreadPWM_SF
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 12-Sep-2023 09:21:38

%% Copyright 2021-2023 NXP
%%
%% NXP Confidential and Proprietary. This software is owned or controlled by NXP and may only be
%% used strictly in accordance with the applicable license terms.  By expressly accepting such
%% terms or by downloading, installing, activating and/or otherwise using the software, you are
%% agreeing that you have read, and that you agree to comply with and are bound by, such license
%% terms. If you do not agree to be bound by the applicable license terms, then you may not retain,
%% install, activate or otherwise use the software.

%implements GMCLIB_SpreadPWM_SF "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("GMCLIB_SpreadPWM_SF_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int GMCLIB_SpreadPWM_SF_wrapper_allocmem(void** work1BUS, int_T work1BUSWidth);
        extern int GMCLIB_SpreadPWM_SF_wrapper_freemem(void** work1BUS);

        extern void GMCLIB_SpreadPWM_SF_wrapper_InitializeConditions(const uint32_T p1, const uint16_T p2, const uint32_T p3, const uint8_T p4,  void* work1, void* work1BUS);
        extern void GMCLIB_SpreadPWM_SF_wrapper_Output( uint16_T* y1,  void* work1, void* work1BUS);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("GMCLIB_SpreadPWM_SF_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "gmclib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GMCLIB_SpreadPWM.h"

        int GMCLIB_SpreadPWM_SF_wrapper_allocmem(void** work1BUS, int_T work1BUSWidth) {
            *work1BUS = calloc(sizeof(GMCLIB_SPREADPWM_T), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            return 0;
        }
        
        int GMCLIB_SpreadPWM_SF_wrapper_freemem(void** work1BUS) {
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            return 0;
        }

        void GMCLIB_SpreadPWM_SF_wrapper_InitializeConditions(const uint32_T p1, const uint16_T p2, const uint32_T p3, const uint8_T p4,  void* work1, void* work1BUS) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GMCLIB_SPREADPWM_T *)work1BUS)", "(char *)work1", 0)>

            GMCLIB_SpreadPWMInit((tU32)(p1), (tU16)(p2), (tU32)(p3), (tU8)(p4), (GMCLIB_SPREADPWM_T *const)(work1BUS));

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GMCLIB_SPREADPWM_T *)work1BUS)", 0)>
        }

        void GMCLIB_SpreadPWM_SF_wrapper_Output( uint16_T* y1,  void* work1, void* work1BUS) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GMCLIB_SPREADPWM_T *)work1BUS)", "(char *)work1", 0)>

            *((tU16 *)y1) = GMCLIB_SpreadPWM((GMCLIB_SPREADPWM_T *const)(work1BUS));

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GMCLIB_SPREADPWM_T *)work1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("gmclib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GMCLIB_SpreadPWM.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GMCLIB_SpreadPWM_SF_wrapper_allocmem(%<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u32PWMFreq = CAST("Number",Parameter[0].Value[0])
        %assign u16Mod = CAST("Number",Parameter[1].Value[0])
        %assign u32SpreadFreq = CAST("Number",Parameter[2].Value[0])
        %assign u8FreqDev = CAST("Number",Parameter[3].Value[0])
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        GMCLIB_SpreadPWM_SF_wrapper_InitializeConditions(%<u32PWMFreq>, %<u16Mod>, %<u32SpreadFreq>, %<u8FreqDev>, %<pParam>, %<work1BUS_ptr>);
    %else
        %assign u32PWMFreq = CAST("Number",Parameter[0].Value[0])
        %assign u16Mod = CAST("Number",Parameter[1].Value[0])
        %assign u32SpreadFreq = CAST("Number",Parameter[2].Value[0])
        %assign u8FreqDev = CAST("Number",Parameter[3].Value[0])
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %% 
        GMCLIB_SpreadPWMInit((tU32)(%<u32PWMFreq>), (tU16)(%<u16Mod>), (tU32)(%<u32SpreadFreq>), (tU8)(%<u8FreqDev>), (GMCLIB_SPREADPWM_T *const)(%<pParam>));
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign retVal = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        GMCLIB_SpreadPWM_SF_wrapper_Output(%<retVal>, %<pParam>, %<work1BUS_ptr>);
    %else
        %if !LibBlockOutputSignalIsExpr(0)
            %assign retVal = LibBlockOutputSignal(0, "", "", 0)
            %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
            %% 
        %<retVal> = GMCLIB_SpreadPWM((GMCLIB_SPREADPWM_T *const)(%<pParam>));
        %endif
    %endif
%endfunction

%% Function: BlockOutputSignal ============================================
%function BlockOutputSignal (block,system,portIdx,ucv,lcv,idx,retType) void
    %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
    %% 
    %switch retType
      %case "Signal"
        %if portIdx == 0
          %return "GMCLIB_SpreadPWM((GMCLIB_SPREADPWM_T *const)(%<pParam>))"
        %else
          %assign errTxt = "Block output port index not supported: %<portIdx>"
          %<LibBlockReportError(block,errTxt)>
        %endif
      %default
        %assign errTxt = "Unsupported return type: %<retType>"
        %<LibBlockReportError(block,errTxt)>
    %endswitch
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GMCLIB_SpreadPWM_SF_wrapper_freemem(%<work1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
