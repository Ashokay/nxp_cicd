%% file : GMCLIB_DoubleSwitching_SF_F16.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for GMCLIB_DoubleSwitching_SF_F16
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 12-Sep-2023 09:21:54

%% Copyright 2019-2023 NXP
%%
%% NXP Confidential and Proprietary. This software is owned or controlled by NXP and may only be
%% used strictly in accordance with the applicable license terms.  By expressly accepting such
%% terms or by downloading, installing, activating and/or otherwise using the software, you are
%% agreeing that you have read, and that you agree to comply with and are bound by, such license
%% terms. If you do not agree to be bound by the applicable license terms, then you may not retain,
%% install, activate or otherwise use the software.

%implements GMCLIB_DoubleSwitching_SF_F16 "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("GMCLIB_DoubleSwitching_SF_F16_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int GMCLIB_DoubleSwitching_SF_F16_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** y2BUS, int_T y2BUSWidth, void** u1BUS, int_T u1BUSWidth, void** u3BUS, int_T u3BUSWidth);
        extern int GMCLIB_DoubleSwitching_SF_F16_wrapper_freemem(void** y1BUS, void** y2BUS, void** u1BUS, void** u3BUS);

        extern void GMCLIB_DoubleSwitching_SF_F16_wrapper_Output( void* y1, void* y1BUS,  void* y2, void* y2BUS, const void* u1, void* u1BUS, const uint16_T u2, const void* u3, void* u3BUS);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("GMCLIB_DoubleSwitching_SF_F16_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "gmclib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GMCLIB_DoubleSwitching.h"

        int GMCLIB_DoubleSwitching_SF_F16_wrapper_allocmem(void** y1BUS, int_T y1BUSWidth, void** y2BUS, int_T y2BUSWidth, void** u1BUS, int_T u1BUSWidth, void** u3BUS, int_T u3BUSWidth) {
            *y1BUS = calloc(sizeof(GMCLIB_DOUBLESWITCHING_3PH_EDGES_T_F16), y1BUSWidth);
            if (*y1BUS==NULL) return -1;
            *y2BUS = calloc(sizeof(GMCLIB_DOUBLESWITCHING_TRIGGERS_T_F16), y2BUSWidth);
            if (*y2BUS==NULL) return -1;
            *u1BUS = calloc(sizeof(SWLIBS_3Syst_F16), u1BUSWidth);
            if (*u1BUS==NULL) return -1;
            *u3BUS = calloc(sizeof(GMCLIB_DOUBLESWITCHING_T_F16), u3BUSWidth);
            if (*u3BUS==NULL) return -1;
            return 0;
        }
        
        int GMCLIB_DoubleSwitching_SF_F16_wrapper_freemem(void** y1BUS, void** y2BUS, void** u1BUS, void** u3BUS) {
            if (*y1BUS!=NULL) free(*y1BUS);
            *y1BUS = NULL;
            if (*y2BUS!=NULL) free(*y2BUS);
            *y2BUS = NULL;
            if (*u1BUS!=NULL) free(*u1BUS);
            *u1BUS = NULL;
            if (*u3BUS!=NULL) free(*u3BUS);
            *u3BUS = NULL;
            return 0;
        }

        void GMCLIB_DoubleSwitching_SF_F16_wrapper_Output( void* y1, void* y1BUS,  void* y2, void* y2BUS, const void* u1, void* u1BUS, const uint16_T u2, const void* u3, void* u3BUS) {

            /* Assign the Simulink structure u1 to user structure u1BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(0)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(SWLIBS_3Syst_F16 *)u1BUS)", "(char *)u1", 0)>


            /* Assign the Simulink structure u3 to user structure u3BUS */
            %assign dTypeId = LibBlockInputSignalDataTypeId(2)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GMCLIB_DOUBLESWITCHING_T_F16 *)u3BUS)", "(char *)u3", 0)>

            GMCLIB_DoubleSwitching_F16((GMCLIB_DOUBLESWITCHING_3PH_EDGES_T_F16 *const)(y1BUS), (GMCLIB_DOUBLESWITCHING_TRIGGERS_T_F16 *const)(y2BUS), (const SWLIBS_3Syst_F16 *const)(u1BUS), (tU16)(u2), (GMCLIB_DOUBLESWITCHING_T_F16 *const)(u3BUS));

            /* Assign the user structure y1BUS to the Simulink structure y1 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(0)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y1", "(*(GMCLIB_DOUBLESWITCHING_3PH_EDGES_T_F16 *)y1BUS)", 0)>

            /* Assign the user structure y2BUS to the Simulink structure y2 */
            %assign dTypeId = LibBlockOutputSignalDataTypeId(1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)y2", "(*(GMCLIB_DOUBLESWITCHING_TRIGGERS_T_F16 *)y2BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("gmclib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GMCLIB_DoubleSwitching.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign y2BUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign u1BUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign u3BUS_addr = "&" + LibBlockPWork("", "", "", 3)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GMCLIB_DoubleSwitching_SF_F16_wrapper_allocmem(%<y1BUS_addr>, %<LibBlockOutputSignalWidth(0)>, %<y2BUS_addr>, %<LibBlockOutputSignalWidth(1)>, %<u1BUS_addr>, %<LibBlockInputSignalWidth(0)>, %<u3BUS_addr>, %<LibBlockInputSignalWidth(2)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign pOutEdges = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign pOutTriggers = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign y2BUS_ptr = LibBlockPWork("", "", "", 1)
        %assign pInPwm = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u1BUS_ptr = LibBlockPWork("", "", "", 2)
        %assign u16Sector = LibBlockInputSignal(1, "", "", 0)
        %assign pParam = LibBlockInputSignalAddr(2, "", "", 0)
        %assign u3BUS_ptr = LibBlockPWork("", "", "", 3)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        GMCLIB_DoubleSwitching_SF_F16_wrapper_Output(%<pOutEdges>, %<y1BUS_ptr>, %<pOutTriggers>, %<y2BUS_ptr>, %<pInPwm>, %<u1BUS_ptr>, %<u16Sector>, %<pParam>, %<u3BUS_ptr>);
    %else
        %assign pOutEdges = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign pOutTriggers = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign pInPwm = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u16Sector = LibBlockInputSignal(1, "", "", 0)
        %assign pParam = LibBlockInputSignalAddr(2, "", "", 0)
        %% 
            GMCLIB_DoubleSwitching_F16((GMCLIB_DOUBLESWITCHING_3PH_EDGES_T_F16 *const)(%<pOutEdges>), (GMCLIB_DOUBLESWITCHING_TRIGGERS_T_F16 *const)(%<pOutTriggers>), (const SWLIBS_3Syst_F16 *const)(%<pInPwm>), (tU16)(%<u16Sector>), (GMCLIB_DOUBLESWITCHING_T_F16 *const)(%<pParam>));
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign y1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign y2BUSBUS_addr = "&" + LibBlockPWork("", "", "", 1)
        %assign u1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 2)
        %assign u3BUSBUS_addr = "&" + LibBlockPWork("", "", "", 3)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GMCLIB_DoubleSwitching_SF_F16_wrapper_freemem(%<y1BUSBUS_addr>, %<y2BUSBUS_addr>, %<u1BUSBUS_addr>, %<u3BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
