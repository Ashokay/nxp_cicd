%% file : GFLIB_ControllerPIDpAW_SF_F16.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for GFLIB_ControllerPIDpAW_SF_F16
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 12-Sep-2023 09:21:33

%% Copyright 2019-2023 NXP
%%
%% NXP Confidential and Proprietary. This software is owned or controlled by NXP and may only be
%% used strictly in accordance with the applicable license terms.  By expressly accepting such
%% terms or by downloading, installing, activating and/or otherwise using the software, you are
%% agreeing that you have read, and that you agree to comply with and are bound by, such license
%% terms. If you do not agree to be bound by the applicable license terms, then you may not retain,
%% install, activate or otherwise use the software.

%implements GFLIB_ControllerPIDpAW_SF_F16 "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("GFLIB_ControllerPIDpAW_SF_F16_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int GFLIB_ControllerPIDpAW_SF_F16_wrapper_allocmem(void** work1BUS, int_T work1BUSWidth);
        extern int GFLIB_ControllerPIDpAW_SF_F16_wrapper_freemem(void** work1BUS);

        extern void GFLIB_ControllerPIDpAW_SF_F16_wrapper_InitializeConditions(const int16_T p3, const int16_T p4, const int16_T p5, const int16_T p6, const int16_T p7, const int16_T p8, const int16_T p9, const int16_T p10, const int16_T p11,  void* work1, void* work1BUS,  int16_T* work2, const int32_T p2, const real_T p12, const real_T p13, const real_T p14, const real_T p15, const real_T p16, const real_T p17, const real_T p18, const real_T p19, const int32_T p20);
        extern void GFLIB_ControllerPIDpAW_SF_F16_wrapper_Output( int16_T* y1, const int16_T u1,  void* work1, void* work1BUS,  int16_T* work2, const int16_T u2, const int16_T u3, const int16_T u4, const int16_T u5, const int16_T u6, const int16_T u7, const int16_T u8, const int16_T u9, const int16_T u10, const int16_T u11, const int32_T u12, const int16_T u13, const int16_T u14,  uint16_T* y2,  int32_T* y3,  int16_T* y4,  int16_T* y5, const int32_T p1, const int32_T p2);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("GFLIB_ControllerPIDpAW_SF_F16_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "gflib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GFLIB_ControllerPIDpAW.h"

        int GFLIB_ControllerPIDpAW_SF_F16_wrapper_allocmem(void** work1BUS, int_T work1BUSWidth) {
            *work1BUS = calloc(sizeof(GFLIB_CONTROLLER_PID_P_AW_T_F16), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            return 0;
        }
        
        int GFLIB_ControllerPIDpAW_SF_F16_wrapper_freemem(void** work1BUS) {
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            return 0;
        }

        void GFLIB_ControllerPIDpAW_SF_F16_wrapper_InitializeConditions(const int16_T p3, const int16_T p4, const int16_T p5, const int16_T p6, const int16_T p7, const int16_T p8, const int16_T p9, const int16_T p10, const int16_T p11,  void* work1, void* work1BUS,  int16_T* work2, const int32_T p2, const real_T p12, const real_T p13, const real_T p14, const real_T p15, const real_T p16, const real_T p17, const real_T p18, const real_T p19, const int32_T p20) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PID_P_AW_T_F16 *)work1BUS)", "(char *)work1", 0)>

            if ((tS32)1 == (tS32)(p2))
            {
              *((tS16 *)work2) = (tS16)1;
            }
            ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16PropGain       = (tFrac16)(p3);
            ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16IntegGain      = (tFrac16)(p4);
            ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16DerivGain      = (tFrac16)(p5);
            ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16FiltCoef       = (tFrac16)(p6);
            ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->s16PropGainShift  = (tS16)(p7);
            ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->s16IntegGainShift = (tS16)(p8);
            ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->s16DerivGainShift = (tS16)(p9);
            ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16LowerLimit     = (tFrac16)(p10);
            ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16UpperLimit     = (tFrac16)(p11);
            GFLIB_ControllerPIDpAWInit_F16((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS));

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GFLIB_CONTROLLER_PID_P_AW_T_F16 *)work1BUS)", 0)>
        }

        void GFLIB_ControllerPIDpAW_SF_F16_wrapper_Output( int16_T* y1, const int16_T u1,  void* work1, void* work1BUS,  int16_T* work2, const int16_T u2, const int16_T u3, const int16_T u4, const int16_T u5, const int16_T u6, const int16_T u7, const int16_T u8, const int16_T u9, const int16_T u10, const int16_T u11, const int32_T u12, const int16_T u13, const int16_T u14,  uint16_T* y2,  int32_T* y3,  int16_T* y4,  int16_T* y5, const int32_T p1, const int32_T p2) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PID_P_AW_T_F16 *)work1BUS)", "(char *)work1", 0)>

            
            if((tS32)2 == (tS32)(p1))
            {
              ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16PropGain       = (tFrac16)(u3);
              ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16IntegGain      = (tFrac16)(u4);
              ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16DerivGain      = (tFrac16)(u5);
              ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16FiltCoef       = (tFrac16)(u6);
              ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->s16PropGainShift  = (tS16)(u7);
              ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->s16IntegGainShift = (tS16)(u8);
              ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->s16DerivGainShift = (tS16)(u9);
              ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16LowerLimit     = (tFrac16)(u10);
              ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16UpperLimit     = (tFrac16)(u11);
              ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f32IntegPartK_1   = (tFrac32)(u12);
              ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16DerivPartK_1   = (tFrac16)(u13);
              ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16InK_1          = (tFrac16)(u14);
            }
            if ((tS32)1 == (tS32)(p2))
            {
              if (*(tS16 *)(work2) != (tS16)0)
              {
                *((tS16 *)work2) = (tS16)0;
                GFLIB_ControllerPIDpAWSetState_F16((tFrac16)(u2), (GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS));
              }
            }
            *y1 = GFLIB_ControllerPIDpAW_F16((tFrac16)(u1), (GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS));
            *((tU16 *)y2) = ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->u16LimitFlag;
            if((tS32)2 == (tS32)(p1))
            {
              *((tFrac32 *)y3) = ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f32IntegPartK_1;
              *((tFrac16 *)y4) = ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16DerivPartK_1;
              *((tFrac16 *)y5) = ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(work1BUS))->f16InK_1;
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GFLIB_CONTROLLER_PID_P_AW_T_F16 *)work1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIDpAW.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GFLIB_ControllerPIDpAW_SF_F16_wrapper_allocmem(%<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign f16PropGain = CAST("Number",Parameter[2].Value[0])
        %assign f16IntegGain = CAST("Number",Parameter[3].Value[0])
        %assign f16DerivGain = CAST("Number",Parameter[4].Value[0])
        %assign f16FiltCoef = CAST("Number",Parameter[5].Value[0])
        %assign s16PropGainShift = CAST("Number",Parameter[6].Value[0])
        %assign s16IntegGainShift = CAST("Number",Parameter[7].Value[0])
        %assign s16DerivGainShift = CAST("Number",Parameter[8].Value[0])
        %assign f16LowerLimit = CAST("Number",Parameter[9].Value[0])
        %assign f16UpperLimit = CAST("Number",Parameter[10].Value[0])
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign s16ResetStates = LibBlockDWorkAddr(work2, "", "", 0)
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %assign pgain = CAST("Real",Parameter[11].Value[0])
        %assign igain = CAST("Real",Parameter[12].Value[0])
        %assign dgain = CAST("Real",Parameter[13].Value[0])
        %assign filtCoef = CAST("Real",Parameter[14].Value[0])
        %assign lowerLimit = CAST("Real",Parameter[15].Value[0])
        %assign upperLimit = CAST("Real",Parameter[16].Value[0])
        %assign inscale = CAST("Real",Parameter[17].Value[0])
        %assign outscale = CAST("Real",Parameter[18].Value[0])
        %assign autoCalcEn = CAST("Number",Parameter[19].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %assign SampleTime = LibBlockSampleTime(block)
        %if(autoCalcEn == 1)
          %assign kpf=pgain*inscale/outscale
          %assign s16PropGainShift=FEVAL("ceil",FEVAL("log2",FEVAL("abs",kpf)))
          %if s16PropGainShift<-15.0
            %assign s16PropGainShift=-15.0
          %endif
          %if s16PropGainShift>15.0
            %assign s16PropGainShift=15.0
          %endif
          %assign s16PropGainShift = CAST("Number",s16PropGainShift)
          %if s16PropGainShift<0
            %assign f16PropGain=kpf*32768.0*CAST("Real",(1U << (-s16PropGainShift)))
          %else
            %assign f16PropGain=kpf*32768.0/CAST("Real",(1U << s16PropGainShift))
          %endif
          %if f16PropGain>32767.0
            %assign f16PropGain=32767.0
          %endif
          %if f16PropGain<-32768.0
            %assign f16PropGain=-32768.0
          %endif
          %assign f16PropGain = CAST("Number",f16PropGain)
          %assign kif=igain*SampleTime*0.5*inscale/outscale
          %assign s16IntegGainShift=FEVAL("ceil",FEVAL("log2",FEVAL("abs",kif)))
          %if s16IntegGainShift<-15.0
            %assign s16IntegGainShift=-15.0
          %endif
          %if s16IntegGainShift>15.0
            %assign s16IntegGainShift=15.0
          %endif
          %assign s16IntegGainShift = CAST("Number",s16IntegGainShift)
          %if s16IntegGainShift<0
            %assign f16IntegGain=kif*32768.0*CAST("Real",(1U << (-s16IntegGainShift)))
          %else
            %assign f16IntegGain=kif*32768.0/CAST("Real",(1U << s16IntegGainShift))
          %endif
          %if f16IntegGain>32767.0
            %assign f16IntegGain=32767.0
          %endif
          %if f16IntegGain<-32768.0
            %assign f16IntegGain=-32768.0
          %endif
          %assign f16IntegGain = CAST("Number",f16IntegGain)
          %assign upperLimitf=upperLimit/outscale
          %assign lowerLimitf=lowerLimit/outscale
          %assign f16UpperLimit=upperLimitf*32768.0
          %if f16UpperLimit>32767.0
            %assign f16UpperLimit=32767.0
          %endif
          %if f16UpperLimit<-32768.0
            %assign f16UpperLimit=-32768.0
          %endif
          %assign f16UpperLimit = CAST("Number",f16UpperLimit)
          %assign f16LowerLimit=lowerLimitf*32768.0
          %if f16LowerLimit>32767.0
            %assign f16LowerLimit=32767.0
          %endif
          %if f16LowerLimit<-32768.0
            %assign f16LowerLimit=-32768.0
          %endif
          %assign f16LowerLimit = CAST("Number",f16LowerLimit)
          %assign exparg=-SampleTime*filtCoef
          %assign expconst=FEVAL("exp",exparg)
          %assign f16FiltCoef=expconst*32768.0
          %if f16FiltCoef>32767.0
            %assign f16FiltCoef=32767.0
          %endif
          %if f16FiltCoef<-32768.0
            %assign f16FiltCoef=-32768.0
          %endif
          %assign f16FiltCoef = CAST("Number",f16FiltCoef)
          %assign kdf=dgain/SampleTime*(1 - expconst)*inscale/outscale
          %assign s16DerivGainShift=FEVAL("ceil",FEVAL("log2",FEVAL("abs",kpf)))
          %if s16DerivGainShift<-15.0
            %assign s16DerivGainShift=-15.0
          %endif
          %if s16DerivGainShift>15.0
            %assign s16DerivGainShift=15.0
          %endif
          %assign s16DerivGainShift = CAST("Number",s16DerivGainShift)
          %if s16DerivGainShift<0
            %assign f16DerivGain=kpf*32768.0*CAST("Real",(1U << (-s16DerivGainShift)))
          %else
            %assign f16DerivGain=kpf*32768.0/CAST("Real",(1U << s16DerivGainShift))
          %endif
          %if f16DerivGain>32767.0
            %assign f16DerivGain=32767.0
          %endif
          %if f16DerivGain<-32768.0
            %assign f16DerivGain=-32768.0
          %endif
          %assign f16DerivGain = CAST("Number",f16DerivGain)
        %endif
        GFLIB_ControllerPIDpAW_SF_F16_wrapper_InitializeConditions(%<f16PropGain>, %<f16IntegGain>, %<f16DerivGain>, %<f16FiltCoef>, %<s16PropGainShift>, %<s16IntegGainShift>, %<s16DerivGainShift>, %<f16LowerLimit>, %<f16UpperLimit>, %<pParam>, %<work1BUS_ptr>, %<s16ResetStates>, %<resetStatesEnable>, %<pgain>, %<igain>, %<dgain>, %<filtCoef>, %<lowerLimit>, %<upperLimit>, %<inscale>, %<outscale>, %<autoCalcEn>);
    %else
        %assign f16PropGain = CAST("Number",Parameter[2].Value[0])
        %assign f16IntegGain = CAST("Number",Parameter[3].Value[0])
        %assign f16DerivGain = CAST("Number",Parameter[4].Value[0])
        %assign f16FiltCoef = CAST("Number",Parameter[5].Value[0])
        %assign s16PropGainShift = CAST("Number",Parameter[6].Value[0])
        %assign s16IntegGainShift = CAST("Number",Parameter[7].Value[0])
        %assign s16DerivGainShift = CAST("Number",Parameter[8].Value[0])
        %assign f16LowerLimit = CAST("Number",Parameter[9].Value[0])
        %assign f16UpperLimit = CAST("Number",Parameter[10].Value[0])
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign s16ResetStates = LibBlockDWork(work2, "", "", 0)
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %assign pgain = CAST("Real",Parameter[11].Value[0])
        %assign igain = CAST("Real",Parameter[12].Value[0])
        %assign dgain = CAST("Real",Parameter[13].Value[0])
        %assign filtCoef = CAST("Real",Parameter[14].Value[0])
        %assign lowerLimit = CAST("Real",Parameter[15].Value[0])
        %assign upperLimit = CAST("Real",Parameter[16].Value[0])
        %assign inscale = CAST("Real",Parameter[17].Value[0])
        %assign outscale = CAST("Real",Parameter[18].Value[0])
        %assign autoCalcEn = CAST("Number",Parameter[19].Value[0])
        %% 
        %assign SampleTime = LibBlockSampleTime(block)
        %if(autoCalcEn == 1)
          %assign kpf=pgain*inscale/outscale
          %assign s16PropGainShift=FEVAL("ceil",FEVAL("log2",FEVAL("abs",kpf)))
          %if s16PropGainShift<-15.0
            %assign s16PropGainShift=-15.0
          %endif
          %if s16PropGainShift>15.0
            %assign s16PropGainShift=15.0
          %endif
          %assign s16PropGainShift = CAST("Number",s16PropGainShift)
          %if s16PropGainShift<0
            %assign f16PropGain=kpf*32768.0*CAST("Real",(1U << (-s16PropGainShift)))
          %else
            %assign f16PropGain=kpf*32768.0/CAST("Real",(1U << s16PropGainShift))
          %endif
          %if f16PropGain>32767.0
            %assign f16PropGain=32767.0
          %endif
          %if f16PropGain<-32768.0
            %assign f16PropGain=-32768.0
          %endif
          %assign f16PropGain = CAST("Number",f16PropGain)
          %assign kif=igain*SampleTime*0.5*inscale/outscale
          %assign s16IntegGainShift=FEVAL("ceil",FEVAL("log2",FEVAL("abs",kif)))
          %if s16IntegGainShift<-15.0
            %assign s16IntegGainShift=-15.0
          %endif
          %if s16IntegGainShift>15.0
            %assign s16IntegGainShift=15.0
          %endif
          %assign s16IntegGainShift = CAST("Number",s16IntegGainShift)
          %if s16IntegGainShift<0
            %assign f16IntegGain=kif*32768.0*CAST("Real",(1U << (-s16IntegGainShift)))
          %else
            %assign f16IntegGain=kif*32768.0/CAST("Real",(1U << s16IntegGainShift))
          %endif
          %if f16IntegGain>32767.0
            %assign f16IntegGain=32767.0
          %endif
          %if f16IntegGain<-32768.0
            %assign f16IntegGain=-32768.0
          %endif
          %assign f16IntegGain = CAST("Number",f16IntegGain)
          %assign upperLimitf=upperLimit/outscale
          %assign lowerLimitf=lowerLimit/outscale
          %assign f16UpperLimit=upperLimitf*32768.0
          %if f16UpperLimit>32767.0
            %assign f16UpperLimit=32767.0
          %endif
          %if f16UpperLimit<-32768.0
            %assign f16UpperLimit=-32768.0
          %endif
          %assign f16UpperLimit = CAST("Number",f16UpperLimit)
          %assign f16LowerLimit=lowerLimitf*32768.0
          %if f16LowerLimit>32767.0
            %assign f16LowerLimit=32767.0
          %endif
          %if f16LowerLimit<-32768.0
            %assign f16LowerLimit=-32768.0
          %endif
          %assign f16LowerLimit = CAST("Number",f16LowerLimit)
          %assign exparg=-SampleTime*filtCoef
          %assign expconst=FEVAL("exp",exparg)
          %assign f16FiltCoef=expconst*32768.0
          %if f16FiltCoef>32767.0
            %assign f16FiltCoef=32767.0
          %endif
          %if f16FiltCoef<-32768.0
            %assign f16FiltCoef=-32768.0
          %endif
          %assign f16FiltCoef = CAST("Number",f16FiltCoef)
          %assign kdf=dgain/SampleTime*(1 - expconst)*inscale/outscale
          %assign s16DerivGainShift=FEVAL("ceil",FEVAL("log2",FEVAL("abs",kpf)))
          %if s16DerivGainShift<-15.0
            %assign s16DerivGainShift=-15.0
          %endif
          %if s16DerivGainShift>15.0
            %assign s16DerivGainShift=15.0
          %endif
          %assign s16DerivGainShift = CAST("Number",s16DerivGainShift)
          %if s16DerivGainShift<0
            %assign f16DerivGain=kpf*32768.0*CAST("Real",(1U << (-s16DerivGainShift)))
          %else
            %assign f16DerivGain=kpf*32768.0/CAST("Real",(1U << s16DerivGainShift))
          %endif
          %if f16DerivGain>32767.0
            %assign f16DerivGain=32767.0
          %endif
          %if f16DerivGain<-32768.0
            %assign f16DerivGain=-32768.0
          %endif
          %assign f16DerivGain = CAST("Number",f16DerivGain)
        %endif
        %if (resetStatesEnable == 1)
          %<s16ResetStates> = (tS16)1;
        %endif
        (%<pParam>)->f16PropGain       = (tFrac16)(%<f16PropGain>);
        (%<pParam>)->f16IntegGain      = (tFrac16)(%<f16IntegGain>);
        (%<pParam>)->f16DerivGain      = (tFrac16)(%<f16DerivGain>);
        (%<pParam>)->f16FiltCoef       = (tFrac16)(%<f16FiltCoef>);
        (%<pParam>)->s16PropGainShift  = (tS16)(%<s16PropGainShift>);
        (%<pParam>)->s16IntegGainShift = (tS16)(%<s16IntegGainShift>);
        (%<pParam>)->s16DerivGainShift = (tS16)(%<s16DerivGainShift>);
        (%<pParam>)->f16LowerLimit     = (tFrac16)(%<f16LowerLimit>);
        (%<pParam>)->f16UpperLimit     = (tFrac16)(%<f16UpperLimit>);
        GFLIB_ControllerPIDpAWInit_F16((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(%<pParam>));
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign f16RetVal = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign f16InErr = LibBlockInputSignal(0, "", "", 0)
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign s16ResetStates = LibBlockDWorkAddr(work2, "", "", 0)
        %assign f16ControllerPIDpAWOut = LibBlockInputSignal(1, "", "", 0)
        %assign f16PropGain = LibBlockInputSignal(2, "", "", 0)
        %assign f16IntegGain = LibBlockInputSignal(3, "", "", 0)
        %assign f16DerivGain = LibBlockInputSignal(4, "", "", 0)
        %assign f16FiltCoef = LibBlockInputSignal(5, "", "", 0)
        %assign s16PropGainShift = LibBlockInputSignal(6, "", "", 0)
        %assign s16IntegGainShift = LibBlockInputSignal(7, "", "", 0)
        %assign s16DerivGainShift = LibBlockInputSignal(8, "", "", 0)
        %assign f16LowerLimit = LibBlockInputSignal(9, "", "", 0)
        %assign f16UpperLimit = LibBlockInputSignal(10, "", "", 0)
        %assign f32IntegPartK_1 = LibBlockInputSignal(11, "", "", 0)
        %assign f16DerivPartK_1 = LibBlockInputSignal(12, "", "", 0)
        %assign f16InK_1 = LibBlockInputSignal(13, "", "", 0)
        %assign u16LimitFlag = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign f32IntegPartK_1_Out = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign f16DerivPartK_1_Out = LibBlockOutputSignalAddr(3, "", "", 0)
        %assign f16InK_1_Out = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %if (showStates == 2)
          %<LibReportFatalError("BAM blocks with shown debugging inputs/outputs are not supported in rapid accelerator mode.")>
        %endif
        GFLIB_ControllerPIDpAW_SF_F16_wrapper_Output(%<f16RetVal>, %<f16InErr>, %<pParam>, %<work1BUS_ptr>, %<s16ResetStates>, %<f16ControllerPIDpAWOut>, %<f16PropGain>, %<f16IntegGain>, %<f16DerivGain>, %<f16FiltCoef>, %<s16PropGainShift>, %<s16IntegGainShift>, %<s16DerivGainShift>, %<f16LowerLimit>, %<f16UpperLimit>, %<f32IntegPartK_1>, %<f16DerivPartK_1>, %<f16InK_1>, %<u16LimitFlag>, %<f32IntegPartK_1_Out>, %<f16DerivPartK_1_Out>, %<f16InK_1_Out>, %<showStates>, %<resetStatesEnable>);
    %else
        %assign f16RetVal = LibBlockOutputSignal(0, "", "", 0)
        %assign f16InErr = LibBlockInputSignal(0, "", "", 0)
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign s16ResetStates = LibBlockDWork(work2, "", "", 0)
        %assign f16ControllerPIDpAWOut = LibBlockInputSignal(1, "", "", 0)
        %assign f16PropGain = LibBlockInputSignal(2, "", "", 0)
        %assign f16IntegGain = LibBlockInputSignal(3, "", "", 0)
        %assign f16DerivGain = LibBlockInputSignal(4, "", "", 0)
        %assign f16FiltCoef = LibBlockInputSignal(5, "", "", 0)
        %assign s16PropGainShift = LibBlockInputSignal(6, "", "", 0)
        %assign s16IntegGainShift = LibBlockInputSignal(7, "", "", 0)
        %assign s16DerivGainShift = LibBlockInputSignal(8, "", "", 0)
        %assign f16LowerLimit = LibBlockInputSignal(9, "", "", 0)
        %assign f16UpperLimit = LibBlockInputSignal(10, "", "", 0)
        %assign f32IntegPartK_1 = LibBlockInputSignal(11, "", "", 0)
        %assign f16DerivPartK_1 = LibBlockInputSignal(12, "", "", 0)
        %assign f16InK_1 = LibBlockInputSignal(13, "", "", 0)
        %assign u16LimitFlag = LibBlockOutputSignal(1, "", "", 0)
        %assign f32IntegPartK_1_Out = LibBlockOutputSignal(2, "", "", 0)
        %assign f16DerivPartK_1_Out = LibBlockOutputSignal(3, "", "", 0)
        %assign f16InK_1_Out = LibBlockOutputSignal(4, "", "", 0)
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %% 
        
        %if (showStates == 2)
          (%<pParam>)->f16PropGain       = (tFrac16)(%<f16PropGain>);
          (%<pParam>)->f16IntegGain      = (tFrac16)(%<f16IntegGain>);
          (%<pParam>)->f16DerivGain      = (tFrac16)(%<f16DerivGain>);
          (%<pParam>)->f16FiltCoef       = (tFrac16)(%<f16FiltCoef>);
          (%<pParam>)->s16PropGainShift  = (tS16)(%<s16PropGainShift>);
          (%<pParam>)->s16IntegGainShift = (tS16)(%<s16IntegGainShift>);
          (%<pParam>)->s16DerivGainShift = (tS16)(%<s16DerivGainShift>);
          (%<pParam>)->f16LowerLimit     = (tFrac16)(%<f16LowerLimit>);
          (%<pParam>)->f16UpperLimit     = (tFrac16)(%<f16UpperLimit>);
          (%<pParam>)->f32IntegPartK_1   = (tFrac32)(%<f32IntegPartK_1>);
          (%<pParam>)->f16DerivPartK_1   = (tFrac16)(%<f16DerivPartK_1>);
          (%<pParam>)->f16InK_1          = (tFrac16)(%<f16InK_1>);
        %endif
        %if (resetStatesEnable == 1)
          if ((tS16)(%<s16ResetStates>) != (tS16)0)
          {
            %<s16ResetStates> = (tS16)0;
            GFLIB_ControllerPIDpAWSetState_F16((tFrac16)(%<f16ControllerPIDpAWOut>), (GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(%<pParam>));
          }
        %endif
        %<f16RetVal> = GFLIB_ControllerPIDpAW_F16((tFrac16)(%<f16InErr>), (GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(%<pParam>));
        %<u16LimitFlag> = ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(%<pParam>))->u16LimitFlag;
        %if (showStates == 2)
          %<f32IntegPartK_1_Out> = ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(%<pParam>))->f32IntegPartK_1;
          %<f16DerivPartK_1_Out> = ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(%<pParam>))->f16DerivPartK_1;
          %<f16InK_1_Out> = ((GFLIB_CONTROLLER_PID_P_AW_T_F16 *const)(%<pParam>))->f16InK_1;
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GFLIB_ControllerPIDpAW_SF_F16_wrapper_freemem(%<work1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
