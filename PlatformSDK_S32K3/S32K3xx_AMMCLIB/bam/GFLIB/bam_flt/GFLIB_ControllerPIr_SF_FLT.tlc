%% file : GFLIB_ControllerPIr_SF_FLT.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for GFLIB_ControllerPIr_SF_FLT
%% 
%% Simulink version      : 9.3 (R2019a) 23-Nov-2018
%% TLC file generated on : 12-Sep-2023 09:21:19

%% Copyright 2019-2023 NXP
%%
%% NXP Confidential and Proprietary. This software is owned or controlled by NXP and may only be
%% used strictly in accordance with the applicable license terms.  By expressly accepting such
%% terms or by downloading, installing, activating and/or otherwise using the software, you are
%% agreeing that you have read, and that you agree to comply with and are bound by, such license
%% terms. If you do not agree to be bound by the applicable license terms, then you may not retain,
%% install, activate or otherwise use the software.

%implements GFLIB_ControllerPIr_SF_FLT "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C
    %if ::GenCPP==1 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
    %endif

    %assign ver = FEVAL("ver", "simulink")
    %assign factor = 1.0
    %assign slVer = 0.0
    %foreach idx = SIZE(ver.Version)[1]
        %if ISEQUAL(ver.Version[idx], ".")
            %assign factor = factor/10.0
        %else
            %assign slVer = slVer + %<ver.Version[idx]>*factor
        %endif
    %endforeach
    
    %if GenerateErtSFunction==1 && slVer < 6.21
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink Object) may not be used in a model for which an ERT S-Function wrapper is being generated")>
    %endif
    
    %if ExtMode==1 && slVer < 6.3
        %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a model uses External Mode")>
    %endif
    
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %if slVer < 6.21
            %<LibReportFatalError("S-Functions generated by the Legacy Code Tool (that use Simulink BusObject) may not be used in a referenced model")>
        %endif
        
        %assign hFileName = FcnGenerateUniqueFileName("GFLIB_ControllerPIr_SF_FLT_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif
        
        extern int GFLIB_ControllerPIr_SF_FLT_wrapper_allocmem(void** work1BUS, int_T work1BUSWidth);
        extern int GFLIB_ControllerPIr_SF_FLT_wrapper_freemem(void** work1BUS);

        extern void GFLIB_ControllerPIr_SF_FLT_wrapper_InitializeConditions(const real32_T p3, const real32_T p4,  void* work1, void* work1BUS,  int32_T* work2, const int32_T p2, const int32_T p5, const real_T p6, const real_T p7, const int32_T p8);
        extern void GFLIB_ControllerPIr_SF_FLT_wrapper_Output( real32_T* y1, const real32_T u1,  void* work1, void* work1BUS,  int32_T* work2, const real32_T u2, const real32_T u3, const real32_T u4, const real32_T u5, const real32_T u6,  real32_T* y2,  real32_T* y3, const int32_T p1, const int32_T p2);
        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("GFLIB_ControllerPIr_SF_FLT_wrapper", "source")
        %openfile cFile = "%<cFileName>.c"
        %selectfile cFile
        #include <stdlib.h>
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        #include "rtwtypes.h"
        #endif

        #include "gflib.h"

        #include "SWLIBS_Typedefs.h"
        #include "GFLIB_ControllerPIr.h"

        int GFLIB_ControllerPIr_SF_FLT_wrapper_allocmem(void** work1BUS, int_T work1BUSWidth) {
            *work1BUS = calloc(sizeof(GFLIB_CONTROLLER_PI_R_T_FLT), work1BUSWidth);
            if (*work1BUS==NULL) return -1;
            return 0;
        }
        
        int GFLIB_ControllerPIr_SF_FLT_wrapper_freemem(void** work1BUS) {
            if (*work1BUS!=NULL) free(*work1BUS);
            *work1BUS = NULL;
            return 0;
        }

        void GFLIB_ControllerPIr_SF_FLT_wrapper_InitializeConditions(const real32_T p3, const real32_T p4,  void* work1, void* work1BUS,  int32_T* work2, const int32_T p2, const int32_T p5, const real_T p6, const real_T p7, const int32_T p8) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PI_R_T_FLT *)work1BUS)", "(char *)work1", 0)>

            if ((tS32)1 == (tS32)(p2))
            {
              *((tS32 *)work2) = (tS32)1;
            }
            ((GFLIB_CONTROLLER_PI_R_T_FLT *const)(work1BUS))->fltCC1sc = (tFloat)(p3);
            ((GFLIB_CONTROLLER_PI_R_T_FLT *const)(work1BUS))->fltCC2sc = (tFloat)(p4);
            GFLIB_ControllerPIrInit_FLT((GFLIB_CONTROLLER_PI_R_T_FLT *const)(work1BUS));

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GFLIB_CONTROLLER_PI_R_T_FLT *)work1BUS)", 0)>
        }

        void GFLIB_ControllerPIr_SF_FLT_wrapper_Output( real32_T* y1, const real32_T u1,  void* work1, void* work1BUS,  int32_T* work2, const real32_T u2, const real32_T u3, const real32_T u4, const real32_T u5, const real32_T u6,  real32_T* y2,  real32_T* y3, const int32_T p1, const int32_T p2) {

            /* Assign the Simulink structure work1 to user structure work1BUS */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignSLStructToUserStruct(dTypeId, "(*(GFLIB_CONTROLLER_PI_R_T_FLT *)work1BUS)", "(char *)work1", 0)>

            
            if((tS32)2 == (tS32)(p1))
            {
              ((GFLIB_CONTROLLER_PI_R_T_FLT *const)(work1BUS))->fltCC1sc = (tFloat)(u3);
              ((GFLIB_CONTROLLER_PI_R_T_FLT *const)(work1BUS))->fltCC2sc = (tFloat)(u4);
              ((GFLIB_CONTROLLER_PI_R_T_FLT *const)(work1BUS))->fltAcc = (tFloat)(u5);
              ((GFLIB_CONTROLLER_PI_R_T_FLT *const)(work1BUS))->fltInErrK1 = (tFloat)(u6);
            }
            if ((tS32)1 == (tS32)(p2))
            {
              if (*(tS32 *)(work2) != (tS32)0)
              {
                *((tS32 *)work2) = (tS32)0;
                GFLIB_ControllerPIrSetState_FLT((tFloat)(u2), (GFLIB_CONTROLLER_PI_R_T_FLT *const)(work1BUS));
              }
            }
            *y1 = GFLIB_ControllerPIr_FLT((tFloat)(u1), (GFLIB_CONTROLLER_PI_R_T_FLT *const)(work1BUS));
            if((tS32)2 == (tS32)(p1))
            {
              *((tFloat *)y2) = ((GFLIB_CONTROLLER_PI_R_T_FLT *const)(work1BUS))->fltAcc;
              *((tFloat *)y3) = ((GFLIB_CONTROLLER_PI_R_T_FLT *const)(work1BUS))->fltInErrK1;
            }

            /* Assign the user structure work1BUS to the Simulink structure work1 */
            %assign dTypeId = LibBlockDWorkDataTypeId(work1)
            %<SLibAssignUserStructToSLStruct(dTypeId, "(char *)work1", "(*(GFLIB_CONTROLLER_PI_R_T_FLT *)work1BUS)", 0)>
        }

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %<LibAddToModelSources("%<cFileName>")>
    %else
        %<LibAddToCommonIncludes("gflib.h")>
        %<LibAddToCommonIncludes("SWLIBS_Typedefs.h")>
        %<LibAddToCommonIncludes("GFLIB_ControllerPIr.h")>
    %endif
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1BUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GFLIB_ControllerPIr_SF_FLT_wrapper_allocmem(%<work1BUS_addr>, %<LibBlockDWorkWidth(work1)>)!=0) %<LibSetRTModelErrorStatus("\"Memory allocation failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% Function: InitializeConditions =========================================
%function InitializeConditions (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign fltCC1sc = CAST("Real",Parameter[2].Value[0])
        %assign fltCC2sc = CAST("Real",Parameter[3].Value[0])
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign s32ResetStates = LibBlockDWorkAddr(work2, "", "", 0)
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %assign intmethod = CAST("Number",Parameter[4].Value[0])
        %assign pgain = CAST("Real",Parameter[5].Value[0])
        %assign igain = CAST("Real",Parameter[6].Value[0])
        %assign autoCalcEn = CAST("Number",Parameter[7].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %assign SampleTime = LibBlockSampleTime(block)
        %if(autoCalcEn == 1)
          %if (intmethod == 1)
            %assign cc1=pgain
            %assign cc2=-pgain+igain*SampleTime
          %else
            %if (intmethod == 2)
              %assign cc1=pgain+igain*SampleTime
              %assign cc2=-pgain
            %else
              %assign cc1=pgain+igain*SampleTime*0.5
              %assign cc2=-pgain+igain*SampleTime*0.5
            %endif
          %endif
          %assign fltCC1sc=cc1
          %assign fltCC2sc=cc2
        %endif
        GFLIB_ControllerPIr_SF_FLT_wrapper_InitializeConditions(%<fltCC1sc>, %<fltCC2sc>, %<pParam>, %<work1BUS_ptr>, %<s32ResetStates>, %<resetStatesEnable>, %<intmethod>, %<pgain>, %<igain>, %<autoCalcEn>);
    %else
        %assign fltCC1sc = CAST("Real",Parameter[2].Value[0])
        %assign fltCC2sc = CAST("Real",Parameter[3].Value[0])
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work2, "", "", 0)
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %assign intmethod = CAST("Number",Parameter[4].Value[0])
        %assign pgain = CAST("Real",Parameter[5].Value[0])
        %assign igain = CAST("Real",Parameter[6].Value[0])
        %assign autoCalcEn = CAST("Number",Parameter[7].Value[0])
        %% 
        %assign SampleTime = LibBlockSampleTime(block)
        %if(autoCalcEn == 1)
          %if (intmethod == 1)
            %assign cc1=pgain
            %assign cc2=-pgain+igain*SampleTime
          %else
            %if (intmethod == 2)
              %assign cc1=pgain+igain*SampleTime
              %assign cc2=-pgain
            %else
              %assign cc1=pgain+igain*SampleTime*0.5
              %assign cc2=-pgain+igain*SampleTime*0.5
            %endif
          %endif
          %assign fltCC1sc=cc1
          %assign fltCC2sc=cc2
        %endif
        %if (resetStatesEnable == 1)
          %<s32ResetStates> = (tS32)1;
        %endif
        (%<pParam>)->fltCC1sc = (tFloat)(%<fltCC1sc>);
        (%<pParam>)->fltCC2sc = (tFloat)(%<fltCC2sc>);
        GFLIB_ControllerPIrInit_FLT((GFLIB_CONTROLLER_PI_R_T_FLT *const)(%<pParam>));
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign fltRetVal = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign fltInErr = LibBlockInputSignal(0, "", "", 0)
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign work1BUS_ptr = LibBlockPWork("", "", "", 0)
        %assign s32ResetStates = LibBlockDWorkAddr(work2, "", "", 0)
        %assign fltControllerPIrOut = LibBlockInputSignal(1, "", "", 0)
        %assign fltCC1sc = LibBlockInputSignal(2, "", "", 0)
        %assign fltCC2sc = LibBlockInputSignal(3, "", "", 0)
        %assign fltAcc = LibBlockInputSignal(4, "", "", 0)
        %assign fltInErrK1 = LibBlockInputSignal(5, "", "", 0)
        %assign fltAcc_Out = LibBlockOutputSignalAddr(1, "", "", 0)
        %assign fltInErrK1_Out = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        %if (showStates == 2)
          %<LibReportFatalError("BAM blocks with shown debugging inputs/outputs are not supported in rapid accelerator mode.")>
        %endif
        GFLIB_ControllerPIr_SF_FLT_wrapper_Output(%<fltRetVal>, %<fltInErr>, %<pParam>, %<work1BUS_ptr>, %<s32ResetStates>, %<fltControllerPIrOut>, %<fltCC1sc>, %<fltCC2sc>, %<fltAcc>, %<fltInErrK1>, %<fltAcc_Out>, %<fltInErrK1_Out>, %<showStates>, %<resetStatesEnable>);
    %else
        %assign fltRetVal = LibBlockOutputSignal(0, "", "", 0)
        %assign fltInErr = LibBlockInputSignal(0, "", "", 0)
        %assign pParam = LibBlockDWorkAddr(work1, "", "", 0)
        %assign s32ResetStates = LibBlockDWork(work2, "", "", 0)
        %assign fltControllerPIrOut = LibBlockInputSignal(1, "", "", 0)
        %assign fltCC1sc = LibBlockInputSignal(2, "", "", 0)
        %assign fltCC2sc = LibBlockInputSignal(3, "", "", 0)
        %assign fltAcc = LibBlockInputSignal(4, "", "", 0)
        %assign fltInErrK1 = LibBlockInputSignal(5, "", "", 0)
        %assign fltAcc_Out = LibBlockOutputSignal(1, "", "", 0)
        %assign fltInErrK1_Out = LibBlockOutputSignal(2, "", "", 0)
        %assign showStates = CAST("Number",Parameter[0].Value[0])
        %assign resetStatesEnable = CAST("Number",Parameter[1].Value[0])
        %% 
        
        %if (showStates == 2)
          (%<pParam>)->fltCC1sc = (tFloat)(%<fltCC1sc>);
          (%<pParam>)->fltCC2sc = (tFloat)(%<fltCC2sc>);
          (%<pParam>)->fltAcc = (tFloat)(%<fltAcc>);
          (%<pParam>)->fltInErrK1 = (tFloat)(%<fltInErrK1>);
        %endif
        %if (resetStatesEnable == 1)
          if ((tS32)(%<s32ResetStates>) != (tS32)0)
          {
            %<s32ResetStates> = (tS32)0;
            GFLIB_ControllerPIrSetState_FLT((tFloat)(%<fltControllerPIrOut>), (GFLIB_CONTROLLER_PI_R_T_FLT *const)(%<pParam>));
          }
        %endif
        %<fltRetVal> = GFLIB_ControllerPIr_FLT((tFloat)(%<fltInErr>), (GFLIB_CONTROLLER_PI_R_T_FLT *const)(%<pParam>));
        %if (showStates == 2)
          %<fltAcc_Out> = ((GFLIB_CONTROLLER_PI_R_T_FLT *const)(%<pParam>))->fltAcc;
          %<fltInErrK1_Out> = ((GFLIB_CONTROLLER_PI_R_T_FLT *const)(%<pParam>))->fltInErrK1;
        %endif
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1BUSBUS_addr = "&" + LibBlockPWork("", "", "", 0)
        %assign blockPath = STRING(LibGetBlockPath(block))
        if (GFLIB_ControllerPIr_SF_FLT_wrapper_freemem(%<work1BUSBUS_addr>)!=0) %<LibSetRTModelErrorStatus("\"Memory free failure for %<blockPath>\"")>;
    %else
    %endif
%endfunction

%% [EOF]
